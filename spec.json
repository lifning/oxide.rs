{
  "components": {
    "schemas": {
      "ByteCount": {
        "description": "A count of bytes, typically used either for memory or storage capacity\n\nThe maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.",
        "format": "uint64",
        "minimum": 0,
        "type": "integer"
      },
      "DatumType": {
        "description": "The type of an individual datum of a metric.",
        "enum": [
          "Bool",
          "I64",
          "F64",
          "String",
          "Bytes",
          "CumulativeI64",
          "CumulativeF64",
          "HistogramI64",
          "HistogramF64"
        ],
        "type": "string"
      },
      "Disk": {
        "description": "Client view of an [`Disk`]",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "devicePath": {
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "description": "unique, mutable, user-controlled identifier for each resource"
          },
          "projectId": {
            "format": "uuid",
            "type": "string"
          },
          "size": {
            "$ref": "#/components/schemas/ByteCount"
          },
          "snapshotId": {
            "format": "uuid",
            "nullable": true,
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/DiskState"
          },
          "timeCreated": {
            "description": "timestamp when this resource was created",
            "format": "date-time",
            "type": "string"
          },
          "timeModified": {
            "description": "timestamp when this resource was last modified",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "description",
          "devicePath",
          "id",
          "name",
          "projectId",
          "size",
          "state",
          "timeCreated",
          "timeModified"
        ],
        "type": "object"
      },
      "DiskCreate": {
        "description": "Create-time parameters for a [`Disk`]",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "size": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ],
            "description": "size of the Disk"
          },
          "snapshotId": {
            "description": "id for snapshot from which the Disk should be created, if any",
            "format": "uuid",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "description",
          "name",
          "size"
        ],
        "type": "object"
      },
      "DiskIdentifier": {
        "description": "Parameters for the [`Disk`] to be attached or detached to an instance",
        "properties": {
          "disk": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "disk"
        ],
        "type": "object"
      },
      "DiskResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/Disk"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "DiskState": {
        "description": "State of a Disk (primarily: attached or not)",
        "oneOf": [
          {
            "description": "Disk is being initialized",
            "properties": {
              "state": {
                "enum": [
                  "creating"
                ],
                "type": "string"
              }
            },
            "required": [
              "state"
            ],
            "type": "object"
          },
          {
            "description": "Disk is ready but detached from any Instance",
            "properties": {
              "state": {
                "enum": [
                  "detached"
                ],
                "type": "string"
              }
            },
            "required": [
              "state"
            ],
            "type": "object"
          },
          {
            "description": "Disk is being attached to the given Instance",
            "properties": {
              "instance": {
                "format": "uuid",
                "type": "string"
              },
              "state": {
                "enum": [
                  "attaching"
                ],
                "type": "string"
              }
            },
            "required": [
              "instance",
              "state"
            ],
            "type": "object"
          },
          {
            "description": "Disk is attached to the given Instance",
            "properties": {
              "instance": {
                "format": "uuid",
                "type": "string"
              },
              "state": {
                "enum": [
                  "attached"
                ],
                "type": "string"
              }
            },
            "required": [
              "instance",
              "state"
            ],
            "type": "object"
          },
          {
            "description": "Disk is being detached from the given Instance",
            "properties": {
              "instance": {
                "format": "uuid",
                "type": "string"
              },
              "state": {
                "enum": [
                  "detaching"
                ],
                "type": "string"
              }
            },
            "required": [
              "instance",
              "state"
            ],
            "type": "object"
          },
          {
            "description": "Disk has been destroyed",
            "properties": {
              "state": {
                "enum": [
                  "destroyed"
                ],
                "type": "string"
              }
            },
            "required": [
              "state"
            ],
            "type": "object"
          },
          {
            "description": "Disk is unavailable",
            "properties": {
              "state": {
                "enum": [
                  "faulted"
                ],
                "type": "string"
              }
            },
            "required": [
              "state"
            ],
            "type": "object"
          }
        ]
      },
      "FieldSchema": {
        "description": "The name and type information for a field of a timeseries schema.",
        "properties": {
          "name": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/FieldSource"
          },
          "ty": {
            "$ref": "#/components/schemas/FieldType"
          }
        },
        "required": [
          "name",
          "source",
          "ty"
        ],
        "type": "object"
      },
      "FieldSource": {
        "description": "The source from which a field is derived, the target or metric.",
        "enum": [
          "Target",
          "Metric"
        ],
        "type": "string"
      },
      "FieldType": {
        "description": "The `FieldType` identifies the data type of a target or metric field.",
        "enum": [
          "String",
          "I64",
          "IpAddr",
          "Uuid",
          "Bool"
        ],
        "type": "string"
      },
      "IdSortMode": {
        "description": "Supported set of sort modes for scanning by id only.\n\nCurrently, we only support scanning in ascending order.",
        "enum": [
          "id-ascending"
        ],
        "type": "string"
      },
      "IdentityMetadata": {
        "description": "Identity-related metadata that's included in nearly all public API objects",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "description": "unique, mutable, user-controlled identifier for each resource"
          },
          "timeCreated": {
            "description": "timestamp when this resource was created",
            "format": "date-time",
            "type": "string"
          },
          "timeModified": {
            "description": "timestamp when this resource was last modified",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "timeCreated",
          "timeModified"
        ],
        "type": "object"
      },
      "Instance": {
        "description": "Client view of an [`Instance`]",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "hostname": {
            "description": "RFC1035-compliant hostname for the Instance.",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "format": "uuid",
            "type": "string"
          },
          "memory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ],
            "description": "memory allocated for this Instance"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "description": "unique, mutable, user-controlled identifier for each resource"
          },
          "ncpus": {
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceCpuCount"
              }
            ],
            "description": "number of CPUs allocated for this Instance"
          },
          "projectId": {
            "description": "id for the project containing this Instance",
            "format": "uuid",
            "type": "string"
          },
          "runState": {
            "$ref": "#/components/schemas/InstanceState"
          },
          "timeCreated": {
            "description": "timestamp when this resource was created",
            "format": "date-time",
            "type": "string"
          },
          "timeModified": {
            "description": "timestamp when this resource was last modified",
            "format": "date-time",
            "type": "string"
          },
          "timeRunStateUpdated": {
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "description",
          "hostname",
          "id",
          "memory",
          "name",
          "ncpus",
          "projectId",
          "runState",
          "timeCreated",
          "timeModified",
          "timeRunStateUpdated"
        ],
        "type": "object"
      },
      "InstanceCpuCount": {
        "description": "The number of CPUs in an Instance",
        "format": "uint16",
        "minimum": 0,
        "type": "integer"
      },
      "InstanceCreate": {
        "description": "Create-time parameters for an [`Instance`]",
        "properties": {
          "description": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "memory": {
            "$ref": "#/components/schemas/ByteCount"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "ncpus": {
            "$ref": "#/components/schemas/InstanceCpuCount"
          }
        },
        "required": [
          "description",
          "hostname",
          "memory",
          "name",
          "ncpus"
        ],
        "type": "object"
      },
      "InstanceResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/Instance"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "InstanceState": {
        "description": "Running state of an Instance (primarily: booted or stopped)\n\nThis typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle",
        "enum": [
          "creating",
          "starting",
          "running",
          "stopping",
          "stopped",
          "rebooting",
          "repairing",
          "failed",
          "destroyed"
        ],
        "type": "string"
      },
      "Ipv4Net": {
        "description": "An IPv4 subnet, including prefix and subnet mask",
        "maxLength": 18,
        "pattern": "^(10\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9]\\.){2}(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])/(1[0-9]|2[0-8]|[8-9]))$^(172\\.16\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])/(1[2-9]|2[0-8]))$^(192\\.168\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])/(1[6-9]|2[0-8]))$",
        "title": "An IPv4 subnet",
        "type": "string"
      },
      "Ipv6Net": {
        "description": "An IPv6 subnet, including prefix and subnet mask",
        "maxLength": 43,
        "pattern": "^(fd|FD)00:((([0-9a-fA-F]{1,4}\\:){6}[0-9a-fA-F]{1,4})|(([0-9a-fA-F]{1,4}:){1,6}:))/(6[4-9]|[7-9][0-9]|1[0-1][0-9]|12[0-6])$",
        "title": "An IPv6 subnet",
        "type": "string"
      },
      "L4PortRange": {
        "description": "An inclusive-inclusive range of IP ports. The second port may be omitted to represent a single port",
        "maxLength": 11,
        "minLength": 1,
        "pattern": "^[0-9]{1,5}(-[0-9]{1,5})?$",
        "title": "A range of IP ports",
        "type": "string"
      },
      "LoginParams": {
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username"
        ],
        "type": "object"
      },
      "MacAddr": {
        "description": "A Media Access Control address, in EUI-48 format",
        "maxLength": 17,
        "minLength": 17,
        "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
        "title": "A MAC address",
        "type": "string"
      },
      "Name": {
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.",
        "maxLength": 63,
        "pattern": "[a-z](|[a-zA-Z0-9-]*[a-zA-Z0-9])",
        "title": "A name used in the API",
        "type": "string"
      },
      "NameOrIdSortMode": {
        "description": "Supported set of sort modes for scanning by name or id",
        "enum": [
          "name-ascending",
          "name-descending",
          "id-ascending"
        ],
        "type": "string"
      },
      "NameSortMode": {
        "description": "Supported set of sort modes for scanning by name only\n\nCurrently, we only support scanning in ascending order.",
        "enum": [
          "name-ascending"
        ],
        "type": "string"
      },
      "NetworkInterface": {
        "description": "A `NetworkInterface` represents a virtual network interface device.",
        "properties": {
          "identity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityMetadata"
              }
            ],
            "description": "common identifying metadata"
          },
          "instance_id": {
            "description": "The Instance to which the interface belongs.",
            "format": "uuid",
            "type": "string"
          },
          "ip": {
            "description": "The IP address assigned to this interface.",
            "format": "ip",
            "type": "string"
          },
          "mac": {
            "allOf": [
              {
                "$ref": "#/components/schemas/MacAddr"
              }
            ],
            "description": "The MAC address assigned to this interface."
          },
          "subnet_id": {
            "description": "The subnet to which the interface belongs.",
            "format": "uuid",
            "type": "string"
          },
          "vpc_id": {
            "description": "The VPC to which the interface belongs.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "identity",
          "instance_id",
          "ip",
          "mac",
          "subnet_id",
          "vpc_id"
        ],
        "type": "object"
      },
      "NetworkInterfaceResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/NetworkInterface"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "Organization": {
        "description": "Client view of an [`Organization`]",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "description": "unique, mutable, user-controlled identifier for each resource"
          },
          "timeCreated": {
            "description": "timestamp when this resource was created",
            "format": "date-time",
            "type": "string"
          },
          "timeModified": {
            "description": "timestamp when this resource was last modified",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "timeCreated",
          "timeModified"
        ],
        "type": "object"
      },
      "OrganizationCreate": {
        "description": "Create-time parameters for an [`Organization`]",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ],
        "type": "object"
      },
      "OrganizationResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/Organization"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "OrganizationUpdate": {
        "description": "Updateable properties of an [`Organization`]",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "Project": {
        "description": "Client view of a [`Project`]",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "description": "unique, mutable, user-controlled identifier for each resource"
          },
          "organizationId": {
            "format": "uuid",
            "type": "string"
          },
          "timeCreated": {
            "description": "timestamp when this resource was created",
            "format": "date-time",
            "type": "string"
          },
          "timeModified": {
            "description": "timestamp when this resource was last modified",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "organizationId",
          "timeCreated",
          "timeModified"
        ],
        "type": "object"
      },
      "ProjectCreate": {
        "description": "Create-time parameters for a [`Project`]",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ],
        "type": "object"
      },
      "ProjectResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/Project"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "ProjectUpdate": {
        "description": "Updateable properties of a [`Project`]",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "Rack": {
        "description": "Client view of an [`Rack`]",
        "properties": {
          "identity": {
            "$ref": "#/components/schemas/IdentityMetadata"
          }
        },
        "required": [
          "identity"
        ],
        "type": "object"
      },
      "RackResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/Rack"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "Role": {
        "description": "Client view of a [`Role`]",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/RoleName"
          }
        },
        "required": [
          "description",
          "name"
        ],
        "type": "object"
      },
      "RoleName": {
        "description": "Role names consist of two string components separated by dot (\".\").",
        "maxLength": 63,
        "pattern": "[a-z-]+\\.[a-z-]+",
        "title": "A name for a built-in role",
        "type": "string"
      },
      "RoleResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/Role"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "RouteDestination": {
        "description": "A subset of [`NetworkTarget`], `RouteDestination` specifies the kind of network traffic that will be matched to be forwarded to the [`RouteTarget`].",
        "oneOf": [
          {
            "properties": {
              "type": {
                "enum": [
                  "ip"
                ],
                "type": "string"
              },
              "value": {
                "format": "ip",
                "type": "string"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          {
            "properties": {
              "type": {
                "enum": [
                  "vpc"
                ],
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          {
            "properties": {
              "type": {
                "enum": [
                  "subnet"
                ],
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          }
        ]
      },
      "RouteTarget": {
        "description": "A subset of [`NetworkTarget`], `RouteTarget` specifies all possible targets that a route can forward to.",
        "oneOf": [
          {
            "properties": {
              "type": {
                "enum": [
                  "ip"
                ],
                "type": "string"
              },
              "value": {
                "format": "ip",
                "type": "string"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          {
            "properties": {
              "type": {
                "enum": [
                  "vpc"
                ],
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          {
            "properties": {
              "type": {
                "enum": [
                  "subnet"
                ],
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          {
            "properties": {
              "type": {
                "enum": [
                  "instance"
                ],
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          {
            "properties": {
              "type": {
                "enum": [
                  "internetGateway"
                ],
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          }
        ]
      },
      "RouterRoute": {
        "description": "A route defines a rule that governs where traffic should be sent based on its destination.",
        "properties": {
          "destination": {
            "$ref": "#/components/schemas/RouteDestination"
          },
          "identity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityMetadata"
              }
            ],
            "description": "common identifying metadata"
          },
          "kind": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RouterRouteKind"
              }
            ],
            "description": "Describes the kind of router. Set at creation. `read-only`"
          },
          "router_id": {
            "description": "The VPC Router to which the route belongs.",
            "format": "uuid",
            "type": "string"
          },
          "target": {
            "$ref": "#/components/schemas/RouteTarget"
          }
        },
        "required": [
          "destination",
          "identity",
          "kind",
          "router_id",
          "target"
        ],
        "type": "object"
      },
      "RouterRouteCreateParams": {
        "description": "Create-time parameters for a [`RouterRoute`]",
        "properties": {
          "description": {
            "type": "string"
          },
          "destination": {
            "$ref": "#/components/schemas/RouteDestination"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "target": {
            "$ref": "#/components/schemas/RouteTarget"
          }
        },
        "required": [
          "description",
          "destination",
          "name",
          "target"
        ],
        "type": "object"
      },
      "RouterRouteKind": {
        "description": "The classification of a [`RouterRoute`] as defined by the system. The kind determines certain attributes such as if the route is modifiable and describes how or where the route was created.\n\nSee [RFD-21](https://rfd.shared.oxide.computer/rfd/0021#concept-router) for more context",
        "enum": [
          "Default",
          "VpcSubnet",
          "VpcPeering",
          "Custom"
        ],
        "type": "string"
      },
      "RouterRouteResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/RouterRoute"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "RouterRouteUpdateParams": {
        "description": "Updateable properties of a [`RouterRoute`]",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "destination": {
            "$ref": "#/components/schemas/RouteDestination"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "nullable": true
          },
          "target": {
            "$ref": "#/components/schemas/RouteTarget"
          }
        },
        "required": [
          "destination",
          "target"
        ],
        "type": "object"
      },
      "Saga": {
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/SagaState"
          }
        },
        "required": [
          "id",
          "state"
        ],
        "type": "object"
      },
      "SagaErrorInfo": {
        "oneOf": [
          {
            "properties": {
              "error": {
                "enum": [
                  "actionFailed"
                ],
                "type": "string"
              },
              "source_error": {}
            },
            "required": [
              "error",
              "source_error"
            ],
            "type": "object"
          },
          {
            "properties": {
              "error": {
                "enum": [
                  "deserializeFailed"
                ],
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ],
            "type": "object"
          },
          {
            "properties": {
              "error": {
                "enum": [
                  "injectedError"
                ],
                "type": "string"
              }
            },
            "required": [
              "error"
            ],
            "type": "object"
          },
          {
            "properties": {
              "error": {
                "enum": [
                  "serializeFailed"
                ],
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ],
            "type": "object"
          },
          {
            "properties": {
              "error": {
                "enum": [
                  "subsagaCreateFailed"
                ],
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ],
            "type": "object"
          }
        ]
      },
      "SagaResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/Saga"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "SagaState": {
        "oneOf": [
          {
            "properties": {
              "state": {
                "enum": [
                  "running"
                ],
                "type": "string"
              }
            },
            "required": [
              "state"
            ],
            "type": "object"
          },
          {
            "properties": {
              "state": {
                "enum": [
                  "succeeded"
                ],
                "type": "string"
              }
            },
            "required": [
              "state"
            ],
            "type": "object"
          },
          {
            "properties": {
              "error_info": {
                "$ref": "#/components/schemas/SagaErrorInfo"
              },
              "error_node_name": {
                "type": "string"
              },
              "state": {
                "enum": [
                  "failed"
                ],
                "type": "string"
              }
            },
            "required": [
              "error_info",
              "error_node_name",
              "state"
            ],
            "type": "object"
          }
        ]
      },
      "SessionUser": {
        "description": "Client view of currently authed user.",
        "properties": {
          "id": {
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "type": "object"
      },
      "Sled": {
        "description": "Client view of an [`Sled`]",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "description": "unique, mutable, user-controlled identifier for each resource"
          },
          "serviceAddress": {
            "type": "string"
          },
          "timeCreated": {
            "description": "timestamp when this resource was created",
            "format": "date-time",
            "type": "string"
          },
          "timeModified": {
            "description": "timestamp when this resource was last modified",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "serviceAddress",
          "timeCreated",
          "timeModified"
        ],
        "type": "object"
      },
      "SledResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/Sled"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "TimeseriesName": {
        "description": "Names are constructed by concatenating the target and metric names with ':'. Target and metric names must be lowercase alphanumeric characters with '_' separating words.",
        "pattern": "(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*):(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*)",
        "title": "The name of a timeseries",
        "type": "string"
      },
      "TimeseriesSchema": {
        "description": "The schema for a timeseries.\n\nThis includes the name of the timeseries, as well as the datum type of its metric and the schema for each field.",
        "properties": {
          "created": {
            "format": "date-time",
            "type": "string"
          },
          "datum_type": {
            "$ref": "#/components/schemas/DatumType"
          },
          "field_schema": {
            "items": {
              "$ref": "#/components/schemas/FieldSchema"
            },
            "type": "array"
          },
          "timeseries_name": {
            "$ref": "#/components/schemas/TimeseriesName"
          }
        },
        "required": [
          "created",
          "datum_type",
          "field_schema",
          "timeseries_name"
        ],
        "type": "object"
      },
      "TimeseriesSchemaResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/TimeseriesSchema"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "User": {
        "description": "Client view of a [`User`]",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "description": "unique, mutable, user-controlled identifier for each resource"
          },
          "timeCreated": {
            "description": "timestamp when this resource was created",
            "format": "date-time",
            "type": "string"
          },
          "timeModified": {
            "description": "timestamp when this resource was last modified",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "timeCreated",
          "timeModified"
        ],
        "type": "object"
      },
      "UserResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "Vpc": {
        "description": "Client view of a [`Vpc`]",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "dnsName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "description": "The name used for the VPC in DNS."
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "description": "unique, mutable, user-controlled identifier for each resource"
          },
          "projectId": {
            "description": "id for the project containing this VPC",
            "format": "uuid",
            "type": "string"
          },
          "systemRouterId": {
            "description": "id for the system router where subnet default routes are registered",
            "format": "uuid",
            "type": "string"
          },
          "timeCreated": {
            "description": "timestamp when this resource was created",
            "format": "date-time",
            "type": "string"
          },
          "timeModified": {
            "description": "timestamp when this resource was last modified",
            "format": "date-time",
            "type": "string"
          }
        },
        "required": [
          "description",
          "dnsName",
          "id",
          "name",
          "projectId",
          "systemRouterId",
          "timeCreated",
          "timeModified"
        ],
        "type": "object"
      },
      "VpcCreate": {
        "description": "Create-time parameters for a [`Vpc`]",
        "properties": {
          "description": {
            "type": "string"
          },
          "dnsName": {
            "$ref": "#/components/schemas/Name"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "dnsName",
          "name"
        ],
        "type": "object"
      },
      "VpcFirewallRule": {
        "description": "A single rule in a VPC firewall",
        "properties": {
          "action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleAction"
              }
            ],
            "description": "whether traffic matching the rule should be allowed or dropped"
          },
          "direction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleDirection"
              }
            ],
            "description": "whether this rule is for incoming or outgoing traffic"
          },
          "filters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleFilter"
              }
            ],
            "description": "reductions on the scope of the rule"
          },
          "identity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityMetadata"
              }
            ],
            "description": "common identifying metadata"
          },
          "priority": {
            "description": "the relative priority of this rule",
            "format": "uint16",
            "minimum": 0,
            "type": "integer"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleStatus"
              }
            ],
            "description": "whether this rule is in effect"
          },
          "targets": {
            "description": "list of sets of instances that the rule applies to",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleTarget"
            },
            "type": "array"
          }
        },
        "required": [
          "action",
          "direction",
          "filters",
          "identity",
          "priority",
          "status",
          "targets"
        ],
        "type": "object"
      },
      "VpcFirewallRuleAction": {
        "enum": [
          "allow",
          "deny"
        ],
        "type": "string"
      },
      "VpcFirewallRuleDirection": {
        "enum": [
          "inbound",
          "outbound"
        ],
        "type": "string"
      },
      "VpcFirewallRuleFilter": {
        "description": "Filter for a firewall rule. A given packet must match every field that is present for the rule to apply to it. A packet matches a field if any entry in that field matches the packet.",
        "properties": {
          "hosts": {
            "description": "If present, the sources (if incoming) or destinations (if outgoing) this rule applies to.",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleHostFilter"
            },
            "nullable": true,
            "type": "array"
          },
          "ports": {
            "description": "If present, the destination ports this rule applies to.",
            "items": {
              "$ref": "#/components/schemas/L4PortRange"
            },
            "nullable": true,
            "type": "array"
          },
          "protocols": {
            "description": "If present, the networking protocols this rule applies to.",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleProtocol"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "type": "object"
      },
      "VpcFirewallRuleHostFilter": {
        "description": "A subset of [`NetworkTarget`], `VpcFirewallRuleHostFilter` specifies all possible targets that a route can forward to.",
        "oneOf": [
          {
            "properties": {
              "type": {
                "enum": [
                  "vpc"
                ],
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          {
            "properties": {
              "type": {
                "enum": [
                  "subnet"
                ],
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          {
            "properties": {
              "type": {
                "enum": [
                  "instance"
                ],
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          {
            "properties": {
              "type": {
                "enum": [
                  "ip"
                ],
                "type": "string"
              },
              "value": {
                "format": "ip",
                "type": "string"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          {
            "properties": {
              "type": {
                "enum": [
                  "internetGateway"
                ],
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          }
        ]
      },
      "VpcFirewallRuleProtocol": {
        "description": "The protocols that may be specified in a firewall rule's filter",
        "enum": [
          "TCP",
          "UDP",
          "ICMP"
        ],
        "type": "string"
      },
      "VpcFirewallRuleResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRule"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "VpcFirewallRuleStatus": {
        "enum": [
          "disabled",
          "enabled"
        ],
        "type": "string"
      },
      "VpcFirewallRuleTarget": {
        "description": "A subset of [`NetworkTarget`], `VpcFirewallRuleTarget` specifies all possible targets that a firewall rule can be attached to.",
        "oneOf": [
          {
            "properties": {
              "type": {
                "enum": [
                  "vpc"
                ],
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          {
            "properties": {
              "type": {
                "enum": [
                  "subnet"
                ],
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          },
          {
            "properties": {
              "type": {
                "enum": [
                  "instance"
                ],
                "type": "string"
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ],
            "type": "object"
          }
        ]
      },
      "VpcFirewallRuleUpdate": {
        "description": "A single rule in a VPC firewall",
        "properties": {
          "action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleAction"
              }
            ],
            "description": "whether traffic matching the rule should be allowed or dropped"
          },
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "direction": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleDirection"
              }
            ],
            "description": "whether this rule is for incoming or outgoing traffic"
          },
          "filters": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleFilter"
              }
            ],
            "description": "reductions on the scope of the rule"
          },
          "priority": {
            "description": "the relative priority of this rule",
            "format": "uint16",
            "minimum": 0,
            "type": "integer"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleStatus"
              }
            ],
            "description": "whether this rule is in effect"
          },
          "targets": {
            "description": "list of sets of instances that the rule applies to",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleTarget"
            },
            "type": "array"
          }
        },
        "required": [
          "action",
          "description",
          "direction",
          "filters",
          "priority",
          "status",
          "targets"
        ],
        "type": "object"
      },
      "VpcFirewallRuleUpdateParams": {
        "additionalProperties": {
          "$ref": "#/components/schemas/VpcFirewallRuleUpdate"
        },
        "description": "Updateable properties of a [`Vpc`]'s firewall Note that VpcFirewallRules are implicitly created along with a Vpc, so there is no explicit creation.",
        "type": "object"
      },
      "VpcFirewallRuleUpdateResult": {
        "additionalProperties": {
          "$ref": "#/components/schemas/VpcFirewallRule"
        },
        "description": "Response to an update replacing [`Vpc`]'s firewall",
        "type": "object"
      },
      "VpcResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/Vpc"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "VpcRouter": {
        "description": "A VPC router defines a series of rules that indicate where traffic should be sent depending on its destination.",
        "properties": {
          "identity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityMetadata"
              }
            ],
            "description": "common identifying metadata"
          },
          "kind": {
            "$ref": "#/components/schemas/VpcRouterKind"
          },
          "vpc_id": {
            "description": "The VPC to which the router belongs.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "identity",
          "kind",
          "vpc_id"
        ],
        "type": "object"
      },
      "VpcRouterCreate": {
        "description": "Create-time parameters for a [`VpcRouter`]",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ],
        "type": "object"
      },
      "VpcRouterKind": {
        "enum": [
          "system",
          "custom"
        ],
        "type": "string"
      },
      "VpcRouterResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/VpcRouter"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "VpcRouterUpdate": {
        "description": "Updateable properties of a [`VpcRouter`]",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "VpcSubnet": {
        "description": "A VPC subnet represents a logical grouping for instances that allows network traffic between them, within a IPv4 subnetwork or optionall an IPv6 subnetwork.",
        "properties": {
          "identity": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IdentityMetadata"
              }
            ],
            "description": "common identifying metadata"
          },
          "ipv4_block": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ],
            "description": "The IPv4 subnet CIDR block.",
            "nullable": true
          },
          "ipv6_block": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ],
            "description": "The IPv6 subnet CIDR block.",
            "nullable": true
          },
          "vpc_id": {
            "description": "The VPC to which the subnet belongs.",
            "format": "uuid",
            "type": "string"
          }
        },
        "required": [
          "identity",
          "vpc_id"
        ],
        "type": "object"
      },
      "VpcSubnetCreate": {
        "description": "Create-time parameters for a [`VpcSubnet`]",
        "properties": {
          "description": {
            "type": "string"
          },
          "ipv4Block": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ],
            "nullable": true
          },
          "ipv6Block": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ],
            "nullable": true
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ],
        "type": "object"
      },
      "VpcSubnetResultsPage": {
        "description": "A single page of results",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "items": {
              "$ref": "#/components/schemas/VpcSubnet"
            },
            "type": "array"
          },
          "next_page": {
            "description": "token used to fetch the next page of results (if any)",
            "nullable": true,
            "type": "string"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "VpcSubnetUpdate": {
        "description": "Updateable properties of a [`VpcSubnet`]",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ipv4Block": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ],
            "nullable": true
          },
          "ipv6Block": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ],
            "nullable": true
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      },
      "VpcUpdate": {
        "description": "Updateable properties of a [`Vpc`]",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "dnsName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "nullable": true
          },
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "nullable": true
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "contact": {
      "email": "api@oxide.computer",
      "url": "https://oxide.computer"
    },
    "description": "API for interacting with the Oxide control plane",
    "title": "Oxide Region API",
    "version": "0.0.1",
    "x-go": {
      "client": "// Create a client with your token and host.\nclient, err := oxide.NewClient(\"$OXIDE_TOKEN\", \"your apps user agent\", \"$OXIDE_HOST\")\nif err != nil {\n  panic(err)\n}\n\n// - OR -\n\n// Create a new client with your token and host parsed from the environment\n// variables: OXIDE_TOKEN, OXIDE_HOST.\nclient, err := oxide.NewClientFromEnv(\"your apps user agent\")\nif err != nil {\n  panic(err)\n}",
      "install": "go get github.com/oxidecomputer/oxide.go"
    },
    "x-rust": {
      "client": "use oxide_api::Client;\n\nlet client = Client::new(String::from(\"api-key\"));",
      "install": "[dependencies]\noxide-api = \"0.1.0-rc.7\""
    }
  },
  "openapi": "3.0.3",
  "paths": {
    "/hardware/racks": {
      "get": {
        "description": "List racks in the system.",
        "operationId": "hardware_racks_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RackResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "hardware"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// RacksList\n//\n// List racks in the system.\n//\n// To iterate over all pages, use the `RacksListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n//\t- `sortBy`\n\nrackResultsPage, err := client.Hardware.RacksList(limit, pageToken, sortBy)\n\n// - OR -\n\n// RacksListAllPages\n//\n// List racks in the system.\n//\n// This method is a wrapper around the `RacksList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\n\nRack, err := client.Hardware.RacksListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#HardwareService.RacksList"
        },
        "x-rust": {
          "example": "let vec_crate_types_rack = client.hardware().racks_get(limit, page_token, sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/hardware/struct.Hardware.html#method.racks_get"
        }
      }
    },
    "/hardware/racks/{rack_id}": {
      "get": {
        "description": "Fetch information about a particular rack.",
        "operationId": "hardware_racks_get_rack",
        "parameters": [
          {
            "in": "path",
            "name": "rack_id",
            "required": true,
            "schema": {
              "description": "The rack's unique ID.",
              "format": "uuid",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rack"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "hardware"
        ],
        "x-go": {
          "example": "// RacksGetRack\n//\n// Fetch information about a particular rack.\n//\n// Parameters:\n//\t- `rackId`\n\nrack, err := client.Hardware.RacksGetRack(rackId)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#HardwareService.RacksGetRack"
        },
        "x-rust": {
          "example": "let rack = client.hardware().racks_get_rack(rack_id).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/hardware/struct.Hardware.html#method.racks_get_rack"
        }
      }
    },
    "/hardware/sleds": {
      "get": {
        "description": "List sleds in the system.",
        "operationId": "hardware_sleds_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SledResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "hardware"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// SledsList\n//\n// List sleds in the system.\n//\n// To iterate over all pages, use the `SledsListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n//\t- `sortBy`\n\nsledResultsPage, err := client.Hardware.SledsList(limit, pageToken, sortBy)\n\n// - OR -\n\n// SledsListAllPages\n//\n// List sleds in the system.\n//\n// This method is a wrapper around the `SledsList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\n\nSled, err := client.Hardware.SledsListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#HardwareService.SledsList"
        },
        "x-rust": {
          "example": "let vec_crate_types_sled = client.hardware().sleds_get(limit, page_token, sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/hardware/struct.Hardware.html#method.sleds_get"
        }
      }
    },
    "/hardware/sleds/{sled_id}": {
      "get": {
        "description": "Fetch information about a sled in the system.",
        "operationId": "hardware_sleds_get_sled",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "required": true,
            "schema": {
              "description": "The sled's unique ID.",
              "format": "uuid",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sled"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "hardware"
        ],
        "x-go": {
          "example": "// SledsGetSled\n//\n// Fetch information about a sled in the system.\n//\n// Parameters:\n//\t- `sledId`\n\nsled, err := client.Hardware.SledsGetSled(sledId)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#HardwareService.SledsGetSled"
        },
        "x-rust": {
          "example": "let sled = client.hardware().sleds_get_sled(sled_id).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/hardware/struct.Hardware.html#method.sleds_get_sled"
        }
      }
    },
    "/login": {
      "post": {
        "operationId": "spoof_login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": ""
          }
        },
        "x-go": {
          "example": "// SpoofLogin\n\nif err := client.SpoofLogin(body); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#Client.SpoofLogin"
        },
        "x-rust": {
          "example": "client.login().spoof(body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/login/struct.Login.html#method.spoof"
        }
      }
    },
    "/logout": {
      "post": {
        "operationId": "logout",
        "responses": {
          "default": {
            "description": ""
          }
        },
        "x-go": {
          "example": "// Logout\n\nif err := client.Logout(); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#Client.Logout"
        },
        "x-rust": {
          "example": "client.logout().get().await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/logout/struct.Logout.html#method.get"
        }
      }
    },
    "/organizations": {
      "get": {
        "description": "List all organizations.",
        "operationId": "organizations_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "organizations"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List all organizations.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n//\t- `sortBy`\n\norganizationResultsPage, err := client.Organizations.List(limit, pageToken, sortBy)\n\n// - OR -\n\n// ListAllPages\n//\n// List all organizations.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\n\nOrganization, err := client.Organizations.ListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.List"
        },
        "x-rust": {
          "example": "let vec_crate_types_user = client.organizations().get_page(limit, page_token, sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.get_page"
        }
      },
      "post": {
        "description": "Create a new organization.",
        "operationId": "organizations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "successful creation"
          }
        },
        "tags": [
          "organizations"
        ],
        "x-go": {
          "example": "// Create\n//\n// Create a new organization.\n\norganization, err := client.Organizations.Create(body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.Create"
        },
        "x-rust": {
          "example": "let user = client.organizations().post(body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}": {
      "delete": {
        "description": "Delete a specific organization.",
        "operationId": "organizations_delete_organization",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "tags": [
          "organizations"
        ],
        "x-go": {
          "example": "// Delete\n//\n// Delete a specific organization.\n//\n// Parameters:\n//\t- `organizationName`\n\nif err := client.Organizations.Delete(organizationName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.Delete"
        },
        "x-rust": {
          "example": "client.organizations().delete(organization_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.delete"
        }
      },
      "get": {
        "description": "Fetch a specific organization",
        "operationId": "organizations_get_organization",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "organizations"
        ],
        "x-go": {
          "example": "// Get\n//\n// Fetch a specific organization\n//\n// Parameters:\n//\t- `organizationName`\n\norganization, err := client.Organizations.Get(organizationName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.Get"
        },
        "x-rust": {
          "example": "let user = client.organizations().get(organization_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.get"
        }
      },
      "put": {
        "description": "Update a specific organization.\n * TODO-correctness: Is it valid for PUT to accept application/json that's a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.",
        "operationId": "organizations_put_organization",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "organizations"
        ],
        "x-go": {
          "example": "// Put\n//\n// Update a specific organization.\n//  * TODO-correctness: Is it valid for PUT to accept application/json that's a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.\n//\n// Parameters:\n//\t- `organizationName`\n\norganization, err := client.Organizations.Put(organizationName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.Put"
        },
        "x-rust": {
          "example": "let user = client.organizations().put(organization_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.put"
        }
      }
    },
    "/organizations/{organization_name}/projects": {
      "get": {
        "description": "List all projects.",
        "operationId": "organization_projects_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "projects"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List all projects.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `sortBy`\n\nprojectResultsPage, err := client.Projects.List(limit, pageToken, sortBy, organizationName)\n\n// - OR -\n\n// ListAllPages\n//\n// List all projects.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `sortBy`\n\nProject, err := client.Projects.ListAllPages(sortBy, organizationName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.List"
        },
        "x-rust": {
          "example": "let vec_crate_types_project = client.projects().get_page(limit, page_token, sort_by, organization_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.get_page"
        }
      },
      "post": {
        "description": "Create a new project.",
        "operationId": "organization_projects_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "successful creation"
          }
        },
        "tags": [
          "projects"
        ],
        "x-go": {
          "example": "// Create\n//\n// Create a new project.\n//\n// Parameters:\n//\t- `organizationName`\n\nproject, err := client.Projects.Create(organizationName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.Create"
        },
        "x-rust": {
          "example": "let project = client.projects().post(organization_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}": {
      "delete": {
        "description": "Delete a specific project.",
        "operationId": "organization_projects_delete_project",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "tags": [
          "projects"
        ],
        "x-go": {
          "example": "// Delete\n//\n// Delete a specific project.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n\nif err := client.Projects.Delete(organizationName, projectName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.Delete"
        },
        "x-rust": {
          "example": "client.projects().delete(organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.delete"
        }
      },
      "get": {
        "description": "Fetch a specific project",
        "operationId": "organization_projects_get_project",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "projects"
        ],
        "x-go": {
          "example": "// Get\n//\n// Fetch a specific project\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n\nproject, err := client.Projects.Get(organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.Get"
        },
        "x-rust": {
          "example": "let project = client.projects().get(organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.get"
        }
      },
      "put": {
        "description": "Update a specific project.\n * TODO-correctness: Is it valid for PUT to accept application/json that's a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.",
        "operationId": "organization_projects_put_project",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "organizations"
        ],
        "x-go": {
          "example": "// sPutProject\n//\n// Update a specific project.\n//  * TODO-correctness: Is it valid for PUT to accept application/json that's a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n\nproject, err := client.Organizations.sPutProject(organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.sPutProject"
        },
        "x-rust": {
          "example": "let project = client.organizations().projects_put_project(organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.projects_put_project"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/disks": {
      "get": {
        "description": "List disks in a project.",
        "operationId": "project_disks_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiskResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "projects"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// DisksList\n//\n// List disks in a project.\n//\n// To iterate over all pages, use the `DisksListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n\ndiskResultsPage, err := client.Projects.DisksList(limit, pageToken, sortBy, organizationName, projectName)\n\n// - OR -\n\n// DisksListAllPages\n//\n// List disks in a project.\n//\n// This method is a wrapper around the `DisksList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n\nDisk, err := client.Projects.DisksListAllPages(sortBy, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.DisksList"
        },
        "x-rust": {
          "example": "let vec_crate_types_disk = client.projects().disks_get(limit, page_token, sort_by, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.disks_get"
        }
      },
      "post": {
        "description": "Create a disk in a project.\n * TODO-correctness See note about instance create.  This should be async.",
        "operationId": "project_disks_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            },
            "description": "successful creation"
          }
        },
        "tags": [
          "projects"
        ],
        "x-go": {
          "example": "// DisksCreate\n//\n// Create a disk in a project.\n//  * TODO-correctness See note about instance create.  This should be async.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n\ndisk, err := client.Projects.DisksCreate(organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.DisksCreate"
        },
        "x-rust": {
          "example": "let disk = client.projects().disks_post(organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.disks_post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/disks/{disk_name}": {
      "delete": {
        "description": "Delete a disk from a project.",
        "operationId": "project_disks_delete_disk",
        "parameters": [
          {
            "in": "path",
            "name": "disk_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "tags": [
          "projects"
        ],
        "x-go": {
          "example": "// DisksDeleteDisk\n//\n// Delete a disk from a project.\n//\n// Parameters:\n//\t- `diskName`\n//\t- `organizationName`\n//\t- `projectName`\n\nif err := client.Projects.DisksDeleteDisk(diskName, organizationName, projectName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.DisksDeleteDisk"
        },
        "x-rust": {
          "example": "client.projects().disks_delete_disk(disk_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.disks_delete_disk"
        }
      },
      "get": {
        "description": "Fetch a single disk in a project.",
        "operationId": "project_disks_get_disk",
        "parameters": [
          {
            "in": "path",
            "name": "disk_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "projects"
        ],
        "x-go": {
          "example": "// DisksGetDisk\n//\n// Fetch a single disk in a project.\n//\n// Parameters:\n//\t- `diskName`\n//\t- `organizationName`\n//\t- `projectName`\n\ndisk, err := client.Projects.DisksGetDisk(diskName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.DisksGetDisk"
        },
        "x-rust": {
          "example": "let disk = client.projects().disks_get_disk(disk_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.disks_get_disk"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances": {
      "get": {
        "description": "List instances in a project.",
        "operationId": "project_instances_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "instances"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List instances in a project.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n\ninstanceResultsPage, err := client.Instances.List(limit, pageToken, sortBy, organizationName, projectName)\n\n// - OR -\n\n// ListAllPages\n//\n// List instances in a project.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n\nInstance, err := client.Instances.ListAllPages(sortBy, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.List"
        },
        "x-rust": {
          "example": "let vec_crate_types_instance = client.instances().get_page(limit, page_token, sort_by, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.get_page"
        }
      },
      "post": {
        "description": "Create an instance in a project.\n * TODO-correctness This is supposed to be async.  Is that right?  We can create the instance immediately -- it's just not booted yet.  Maybe the boot operation is what's a separate operation_id.  What about the response code (201 Created vs 202 Accepted)?  Is that orthogonal?  Things can return a useful response, including an operation id, with either response code.  Maybe a \"reboot\" operation would return a 202 Accepted because there's no actual resource created?",
        "operationId": "project_instances_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            },
            "description": "successful creation"
          }
        },
        "tags": [
          "instances"
        ],
        "x-go": {
          "example": "// Create\n//\n// Create an instance in a project.\n//  * TODO-correctness This is supposed to be async.  Is that right?  We can create the instance immediately -- it's just not booted yet.  Maybe the boot operation is what's a separate operation_id.  What about the response code (201 Created vs 202 Accepted)?  Is that orthogonal?  Things can return a useful response, including an operation id, with either response code.  Maybe a \"reboot\" operation would return a 202 Accepted because there's no actual resource created?\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n\ninstance, err := client.Instances.Create(organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Create"
        },
        "x-rust": {
          "example": "let instance = client.instances().post(organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}": {
      "delete": {
        "description": "Delete an instance from a project.",
        "operationId": "project_instances_delete_instance",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "tags": [
          "instances"
        ],
        "x-go": {
          "example": "// Delete\n//\n// Delete an instance from a project.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\nif err := client.Instances.Delete(instanceName, organizationName, projectName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Delete"
        },
        "x-rust": {
          "example": "client.instances().delete(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.delete"
        }
      },
      "get": {
        "description": "Get an instance in a project.",
        "operationId": "project_instances_get_instance",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "instances"
        ],
        "x-go": {
          "example": "// Get\n//\n// Get an instance in a project.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\ninstance, err := client.Instances.Get(instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Get"
        },
        "x-rust": {
          "example": "let instance = client.instances().get(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.get"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks": {
      "get": {
        "description": "List disks attached to this instance.",
        "operationId": "instance_disks_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiskResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "instances"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// DisksList\n//\n// List disks attached to this instance.\n//\n// To iterate over all pages, use the `DisksListAllPages` method, instead.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n\ndiskResultsPage, err := client.Instances.DisksList(limit, pageToken, sortBy, instanceName, organizationName, projectName)\n\n// - OR -\n\n// DisksListAllPages\n//\n// List disks attached to this instance.\n//\n// This method is a wrapper around the `DisksList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n\nDisk, err := client.Instances.DisksListAllPages(sortBy, instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.DisksList"
        },
        "x-rust": {
          "example": "let vec_crate_types_disk = client.instances().disks_get(limit, page_token, sort_by, instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.disks_get"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks/attach": {
      "post": {
        "operationId": "instance_disks_attach",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskIdentifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            },
            "description": "successfully enqueued operation"
          }
        },
        "tags": [
          "instances"
        ],
        "x-go": {
          "example": "// DisksAttach\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\ndisk, err := client.Instances.DisksAttach(instanceName, organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.DisksAttach"
        },
        "x-rust": {
          "example": "let disk = client.instances().disks_attach(instance_name, organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.disks_attach"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks/detach": {
      "post": {
        "operationId": "instance_disks_detach",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskIdentifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            },
            "description": "successfully enqueued operation"
          }
        },
        "tags": [
          "instances"
        ],
        "x-go": {
          "example": "// DisksDetach\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\ndisk, err := client.Instances.DisksDetach(instanceName, organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.DisksDetach"
        },
        "x-rust": {
          "example": "let disk = client.instances().disks_detach(instance_name, organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.disks_detach"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/reboot": {
      "post": {
        "description": "Reboot an instance.",
        "operationId": "project_instances_instance_reboot",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            },
            "description": "successfully enqueued operation"
          }
        },
        "tags": [
          "instances"
        ],
        "x-go": {
          "example": "// Reboot\n//\n// Reboot an instance.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\ninstance, err := client.Instances.Reboot(instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Reboot"
        },
        "x-rust": {
          "example": "let instance = client.instances().reboot(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.reboot"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/start": {
      "post": {
        "description": "Boot an instance.",
        "operationId": "project_instances_instance_start",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            },
            "description": "successfully enqueued operation"
          }
        },
        "tags": [
          "instances"
        ],
        "x-go": {
          "example": "// Start\n//\n// Boot an instance.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\ninstance, err := client.Instances.Start(instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Start"
        },
        "x-rust": {
          "example": "let instance = client.instances().start(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.start"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/stop": {
      "post": {
        "description": "Halt an instance.",
        "operationId": "project_instances_instance_stop",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            },
            "description": "successfully enqueued operation"
          }
        },
        "tags": [
          "instances"
        ],
        "x-go": {
          "example": "// Stop\n//\n// Halt an instance.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\ninstance, err := client.Instances.Stop(instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Stop"
        },
        "x-rust": {
          "example": "let instance = client.instances().stop(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.stop"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs": {
      "get": {
        "description": "List VPCs in a project.",
        "operationId": "project_vpcs_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// VPCsList\n//\n// List VPCs in a project.\n//\n// To iterate over all pages, use the `VPCsListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n\nvPCResultsPage, err := client.Networking.VPCsList(limit, pageToken, sortBy, organizationName, projectName)\n\n// - OR -\n\n// VPCsListAllPages\n//\n// List VPCs in a project.\n//\n// This method is a wrapper around the `VPCsList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n\nVPC, err := client.Networking.VPCsListAllPages(sortBy, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCsList"
        },
        "x-rust": {
          "example": "let vec_crate_types_vpc = client.networking().vpcs_get(limit, page_token, sort_by, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpcs_get"
        }
      },
      "post": {
        "description": "Create a VPC in a project.",
        "operationId": "project_vpcs_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vpc"
                }
              }
            },
            "description": "successful creation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// VPCsCreate\n//\n// Create a VPC in a project.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n\nvPC, err := client.Networking.VPCsCreate(organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCsCreate"
        },
        "x-rust": {
          "example": "let vpc = client.networking().vpcs_post(organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpcs_post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}": {
      "delete": {
        "description": "Delete a vpc from a project.",
        "operationId": "project_vpcs_delete_vpc",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// VPCsDeleteVPC\n//\n// Delete a vpc from a project.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\n\nif err := client.Networking.VPCsDeleteVPC(organizationName, projectName, vpcName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCsDeleteVPC"
        },
        "x-rust": {
          "example": "client.networking().vpcs_delete_vpc(organization_name, project_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpcs_delete_vpc"
        }
      },
      "get": {
        "description": "Get a VPC in a project.",
        "operationId": "project_vpcs_get_vpc",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vpc"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// VPCsGetVPC\n//\n// Get a VPC in a project.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\n\nvPC, err := client.Networking.VPCsGetVPC(organizationName, projectName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCsGetVPC"
        },
        "x-rust": {
          "example": "let vpc = client.networking().vpcs_get_vpc(organization_name, project_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpcs_get_vpc"
        }
      },
      "put": {
        "description": "Update a VPC.",
        "operationId": "project_vpcs_put_vpc",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// VPCsPutVPC\n//\n// Update a VPC.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\n\nif err := client.Networking.VPCsPutVPC(organizationName, projectName, vpcName, body); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCsPutVPC"
        },
        "x-rust": {
          "example": "client.networking().vpcs_put_vpc(organization_name, project_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpcs_put_vpc"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/firewall/rules": {
      "get": {
        "description": "List firewall rules for a VPC.",
        "operationId": "vpc_firewall_rules_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcFirewallRuleResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// VPCFirewallRulesList\n//\n// List firewall rules for a VPC.\n//\n// To iterate over all pages, use the `VPCFirewallRulesListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nvPCFirewallRuleResultsPage, err := client.Networking.VPCFirewallRulesList(limit, pageToken, sortBy, organizationName, projectName, vpcName)\n\n// - OR -\n\n// VPCFirewallRulesListAllPages\n//\n// List firewall rules for a VPC.\n//\n// This method is a wrapper around the `VPCFirewallRulesList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nVPCFirewallRule, err := client.Networking.VPCFirewallRulesListAllPages(sortBy, organizationName, projectName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCFirewallRulesList"
        },
        "x-rust": {
          "example": "let vec_crate_types_vpc_firewall_rule = client.networking().vpc_firewall_rules_get(limit, page_token, sort_by, organization_name, project_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpc_firewall_rules_get"
        }
      },
      "put": {
        "description": "Replace the firewall rules for a VPC",
        "operationId": "vpc_firewall_rules_put",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcFirewallRuleUpdateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcFirewallRuleUpdateResult"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// VPCFirewallRulesPut\n//\n// Replace the firewall rules for a VPC\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\n\nvPCFirewallRuleUpdateResult, err := client.Networking.VPCFirewallRulesPut(organizationName, projectName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCFirewallRulesPut"
        },
        "x-rust": {
          "example": "let vpc_firewall_rule = client.networking().vpc_firewall_rules_put(organization_name, project_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpc_firewall_rules_put"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers": {
      "get": {
        "description": "List VPC Custom and System Routers",
        "operationId": "vpc_routers_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouterResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// VPCRoutersList\n//\n// List VPC Custom and System Routers\n//\n// To iterate over all pages, use the `VPCRoutersListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nvPCRouterResultsPage, err := client.Networking.VPCRoutersList(limit, pageToken, sortBy, organizationName, projectName, vpcName)\n\n// - OR -\n\n// VPCRoutersListAllPages\n//\n// List VPC Custom and System Routers\n//\n// This method is a wrapper around the `VPCRoutersList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nVPCRouter, err := client.Networking.VPCRoutersListAllPages(sortBy, organizationName, projectName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCRoutersList"
        },
        "x-rust": {
          "example": "let vec_crate_types_vpc_router = client.networking().vpc_routers_get(limit, page_token, sort_by, organization_name, project_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpc_routers_get"
        }
      },
      "post": {
        "description": "Create a VPC Router",
        "operationId": "vpc_routers_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcRouterCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouter"
                }
              }
            },
            "description": "successful creation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// VPCRoutersCreate\n//\n// Create a VPC Router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\n\nvPCRouter, err := client.Networking.VPCRoutersCreate(organizationName, projectName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCRoutersCreate"
        },
        "x-rust": {
          "example": "let vpc_router = client.networking().vpc_routers_post(organization_name, project_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpc_routers_post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}": {
      "delete": {
        "description": "Delete a router from its VPC",
        "operationId": "vpc_routers_delete_router",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// VPCRoutersDeleteRouter\n//\n// Delete a router from its VPC\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `vpcName`\n\nif err := client.Networking.VPCRoutersDeleteRouter(organizationName, projectName, routerName, vpcName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCRoutersDeleteRouter"
        },
        "x-rust": {
          "example": "client.networking().vpc_routers_delete_router(organization_name, project_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpc_routers_delete_router"
        }
      },
      "get": {
        "description": "Get a VPC Router",
        "operationId": "vpc_routers_get_router",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouter"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// VPCRoutersGetRouter\n//\n// Get a VPC Router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `vpcName`\n\nvPCRouter, err := client.Networking.VPCRoutersGetRouter(organizationName, projectName, routerName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCRoutersGetRouter"
        },
        "x-rust": {
          "example": "let vpc_router = client.networking().vpc_routers_get_router(organization_name, project_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpc_routers_get_router"
        }
      },
      "put": {
        "description": "Update a VPC Router",
        "operationId": "vpc_routers_put_router",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcRouterUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// VPCRoutersPutRouter\n//\n// Update a VPC Router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `vpcName`\n\nif err := client.Networking.VPCRoutersPutRouter(organizationName, projectName, routerName, vpcName, body); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCRoutersPutRouter"
        },
        "x-rust": {
          "example": "client.networking().vpc_routers_put_router(organization_name, project_name, router_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpc_routers_put_router"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes": {
      "get": {
        "description": "List a Router's routes",
        "operationId": "routers_routes_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRouteResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// RoutersRoutesList\n//\n// List a Router's routes\n//\n// To iterate over all pages, use the `RoutersRoutesListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nrouterRouteResultsPage, err := client.Networking.RoutersRoutesList(limit, pageToken, sortBy, organizationName, projectName, routerName, vpcName)\n\n// - OR -\n\n// RoutersRoutesListAllPages\n//\n// List a Router's routes\n//\n// This method is a wrapper around the `RoutersRoutesList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nRouterRoute, err := client.Networking.RoutersRoutesListAllPages(sortBy, organizationName, projectName, routerName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.RoutersRoutesList"
        },
        "x-rust": {
          "example": "let vec_crate_types_router_route = client.networking().routers_routes_get(limit, page_token, sort_by, organization_name, project_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.routers_routes_get"
        }
      },
      "post": {
        "description": "Create a VPC Router",
        "operationId": "routers_routes_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouterRouteCreateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRoute"
                }
              }
            },
            "description": "successful creation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// RoutersRoutesCreate\n//\n// Create a VPC Router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `vpcName`\n\nrouterRoute, err := client.Networking.RoutersRoutesCreate(organizationName, projectName, routerName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.RoutersRoutesCreate"
        },
        "x-rust": {
          "example": "let router_route = client.networking().routers_routes_post(organization_name, project_name, router_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.routers_routes_post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes/{route_name}": {
      "delete": {
        "description": "Delete a route from its router",
        "operationId": "routers_routes_delete_route",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "route_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// RoutersRoutesDeleteRoute\n//\n// Delete a route from its router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routeName`\n//\t- `routerName`\n//\t- `vpcName`\n\nif err := client.Networking.RoutersRoutesDeleteRoute(organizationName, projectName, routeName, routerName, vpcName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.RoutersRoutesDeleteRoute"
        },
        "x-rust": {
          "example": "client.networking().routers_routes_delete_route(organization_name, project_name, route_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.routers_routes_delete_route"
        }
      },
      "get": {
        "description": "Get a VPC Router route",
        "operationId": "routers_routes_get_route",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "route_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRoute"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// RoutersRoutesGetRoute\n//\n// Get a VPC Router route\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routeName`\n//\t- `routerName`\n//\t- `vpcName`\n\nrouterRoute, err := client.Networking.RoutersRoutesGetRoute(organizationName, projectName, routeName, routerName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.RoutersRoutesGetRoute"
        },
        "x-rust": {
          "example": "let router_route = client.networking().routers_routes_get_route(organization_name, project_name, route_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.routers_routes_get_route"
        }
      },
      "put": {
        "description": "Update a Router route",
        "operationId": "routers_routes_put_route",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "route_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouterRouteUpdateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// RoutersRoutesPutRoute\n//\n// Update a Router route\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routeName`\n//\t- `routerName`\n//\t- `vpcName`\n\nif err := client.Networking.RoutersRoutesPutRoute(organizationName, projectName, routeName, routerName, vpcName, body); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.RoutersRoutesPutRoute"
        },
        "x-rust": {
          "example": "client.networking().routers_routes_put_route(organization_name, project_name, route_name, router_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.routers_routes_put_route"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets": {
      "get": {
        "description": "List subnets in a VPC.",
        "operationId": "vpc_subnets_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnetResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// VPCSubnetsList\n//\n// List subnets in a VPC.\n//\n// To iterate over all pages, use the `VPCSubnetsListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nvPCSubnetResultsPage, err := client.Networking.VPCSubnetsList(limit, pageToken, sortBy, organizationName, projectName, vpcName)\n\n// - OR -\n\n// VPCSubnetsListAllPages\n//\n// List subnets in a VPC.\n//\n// This method is a wrapper around the `VPCSubnetsList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nVPCSubnet, err := client.Networking.VPCSubnetsListAllPages(sortBy, organizationName, projectName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCSubnetsList"
        },
        "x-rust": {
          "example": "let vec_crate_types_vpc_subnet = client.networking().vpc_subnets_get(limit, page_token, sort_by, organization_name, project_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpc_subnets_get"
        }
      },
      "post": {
        "description": "Create a subnet in a VPC.",
        "operationId": "vpc_subnets_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcSubnetCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnet"
                }
              }
            },
            "description": "successful creation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// VPCSubnetsCreate\n//\n// Create a subnet in a VPC.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\n\nvPCSubnet, err := client.Networking.VPCSubnetsCreate(organizationName, projectName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCSubnetsCreate"
        },
        "x-rust": {
          "example": "let vpc_subnet = client.networking().vpc_subnets_post(organization_name, project_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpc_subnets_post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}": {
      "delete": {
        "description": "Delete a subnet from a VPC.",
        "operationId": "vpc_subnets_delete_subnet",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subnet_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// VPCSubnetsDeleteSubnet\n//\n// Delete a subnet from a VPC.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `subnetName`\n//\t- `vpcName`\n\nif err := client.Networking.VPCSubnetsDeleteSubnet(organizationName, projectName, subnetName, vpcName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCSubnetsDeleteSubnet"
        },
        "x-rust": {
          "example": "client.networking().vpc_subnets_delete_subnet(organization_name, project_name, subnet_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpc_subnets_delete_subnet"
        }
      },
      "get": {
        "description": "Get subnet in a VPC.",
        "operationId": "vpc_subnets_get_subnet",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subnet_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnet"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// VPCSubnetsGetSubnet\n//\n// Get subnet in a VPC.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `subnetName`\n//\t- `vpcName`\n\nvPCSubnet, err := client.Networking.VPCSubnetsGetSubnet(organizationName, projectName, subnetName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCSubnetsGetSubnet"
        },
        "x-rust": {
          "example": "let vpc_subnet = client.networking().vpc_subnets_get_subnet(organization_name, project_name, subnet_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpc_subnets_get_subnet"
        }
      },
      "put": {
        "description": "Update a VPC Subnet.",
        "operationId": "vpc_subnets_put_subnet",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subnet_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcSubnetUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          }
        },
        "tags": [
          "networking"
        ],
        "x-go": {
          "example": "// VPCSubnetsPutSubnet\n//\n// Update a VPC Subnet.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `subnetName`\n//\t- `vpcName`\n\nif err := client.Networking.VPCSubnetsPutSubnet(organizationName, projectName, subnetName, vpcName, body); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.VPCSubnetsPutSubnet"
        },
        "x-rust": {
          "example": "client.networking().vpc_subnets_put_subnet(organization_name, project_name, subnet_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.vpc_subnets_put_subnet"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}/ips": {
      "get": {
        "description": "List IP addresses on a VPC subnet.",
        "operationId": "subnets_ips_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subnet_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkInterfaceResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "networking"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// SubnetsIpsList\n//\n// List IP addresses on a VPC subnet.\n//\n// To iterate over all pages, use the `SubnetsIpsListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `subnetName`\n//\t- `vpcName`\n\nnetworkInterfaceResultsPage, err := client.Networking.SubnetsIpsList(limit, pageToken, sortBy, organizationName, projectName, subnetName, vpcName)\n\n// - OR -\n\n// SubnetsIpsListAllPages\n//\n// List IP addresses on a VPC subnet.\n//\n// This method is a wrapper around the `SubnetsIpsList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `subnetName`\n//\t- `vpcName`\n\nNetworkInterface, err := client.Networking.SubnetsIpsListAllPages(sortBy, organizationName, projectName, subnetName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#NetworkingService.SubnetsIpsList"
        },
        "x-rust": {
          "example": "let vec_crate_types_network_interface = client.networking().subnets_ips_get(limit, page_token, sort_by, organization_name, project_name, subnet_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/networking/struct.Networking.html#method.subnets_ips_get"
        }
      }
    },
    "/roles": {
      "get": {
        "description": "List the built-in roles",
        "operationId": "roles_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "roles"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List the built-in roles\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n\nroleResultsPage, err := client.Roles.List(limit, pageToken)\n\n// - OR -\n\n// ListAllPages\n//\n// List the built-in roles\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n\nRole, err := client.Roles.ListAllPages(,)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RolesService.List"
        },
        "x-rust": {
          "example": "let vec_crate_types_role = client.roles().get_page(limit, page_token).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/roles/struct.Roles.html#method.get_page"
        }
      }
    },
    "/roles/{role_name}": {
      "get": {
        "description": "Fetch a specific built-in role",
        "operationId": "roles_get_role",
        "parameters": [
          {
            "in": "path",
            "name": "role_name",
            "required": true,
            "schema": {
              "description": "The built-in role's unique name.",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "roles"
        ],
        "x-go": {
          "example": "// Get\n//\n// Fetch a specific built-in role\n//\n// Parameters:\n//\t- `roleName`\n\nrole, err := client.Roles.Get(roleName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RolesService.Get"
        },
        "x-rust": {
          "example": "let role = client.roles().get(role_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/roles/struct.Roles.html#method.get"
        }
      }
    },
    "/sagas": {
      "get": {
        "description": "List all sagas (for debugging)",
        "operationId": "sagas_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SagaResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "sagas"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List all sagas (for debugging)\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n//\t- `sortBy`\n\nsagaResultsPage, err := client.Sagas.List(limit, pageToken, sortBy)\n\n// - OR -\n\n// ListAllPages\n//\n// List all sagas (for debugging)\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\n\nSaga, err := client.Sagas.ListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SagasService.List"
        },
        "x-rust": {
          "example": "let vec_crate_types_saga = client.sagas().get_page(limit, page_token, sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/sagas/struct.Sagas.html#method.get_page"
        }
      }
    },
    "/sagas/{saga_id}": {
      "get": {
        "description": "Fetch information about a single saga (for debugging)",
        "operationId": "sagas_get_saga",
        "parameters": [
          {
            "in": "path",
            "name": "saga_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Saga"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "sagas"
        ],
        "x-go": {
          "example": "// Get\n//\n// Fetch information about a single saga (for debugging)\n//\n// Parameters:\n//\t- `sagaId`\n\nsaga, err := client.Sagas.Get(sagaId)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SagasService.Get"
        },
        "x-rust": {
          "example": "let saga = client.sagas().get(saga_id).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/sagas/struct.Sagas.html#method.get"
        }
      }
    },
    "/session/me": {
      "get": {
        "description": "Fetch the user associated with the current session",
        "operationId": "session_me",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionUser"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "x-go": {
          "example": "// SessionMe\n//\n// Fetch the user associated with the current session\n\nsessionUser, err := client.SessionMe()",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#Client.SessionMe"
        },
        "x-rust": {
          "example": "let session_user = client.session().me().await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/session/struct.Session.html#method.me"
        }
      }
    },
    "/timeseries/schema": {
      "get": {
        "description": "List all timeseries schema",
        "operationId": "timeseries_schema_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeseriesSchemaResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "metrics"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// TimeseriesSchemaList\n//\n// List all timeseries schema\n//\n// To iterate over all pages, use the `TimeseriesSchemaListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n\ntimeseriesSchemaResultsPage, err := client.Metrics.TimeseriesSchemaList(limit, pageToken)\n\n// - OR -\n\n// TimeseriesSchemaListAllPages\n//\n// List all timeseries schema\n//\n// This method is a wrapper around the `TimeseriesSchemaList` method.\n// This method returns all the pages at once.\n\nTimeseriesSchema, err := client.Metrics.TimeseriesSchemaListAllPages(,)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#MetricsService.TimeseriesSchemaList"
        },
        "x-rust": {
          "example": "let vec_crate_types_timeseries_schema = client.metrics().timeseries_schema_get(limit, page_token).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/metrics/struct.Metrics.html#method.timeseries_schema_get"
        }
      }
    },
    "/users": {
      "get": {
        "description": "List the built-in system users",
        "operationId": "users_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "description": "Maximum number of items returned by a single call",
              "format": "uint32",
              "minimum": 1,
              "nullable": true,
              "type": "integer"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "description": "Token returned by previous call to retreive the subsequent page",
              "nullable": true,
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResultsPage"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "users"
        ],
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List the built-in system users\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n//\t- `sortBy`\n\nuserResultsPage, err := client.Users.List(limit, pageToken, sortBy)\n\n// - OR -\n\n// ListAllPages\n//\n// List the built-in system users\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\n\nUser, err := client.Users.ListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#UsersService.List"
        },
        "x-rust": {
          "example": "let vec_crate_types_user = client.users().get_page(limit, page_token, sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/users/struct.Users.html#method.get_page"
        }
      }
    },
    "/users/{user_name}": {
      "get": {
        "description": "Fetch a specific built-in system user",
        "operationId": "users_get_user",
        "parameters": [
          {
            "in": "path",
            "name": "user_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "successful operation"
          }
        },
        "tags": [
          "users"
        ],
        "x-go": {
          "example": "// Get\n//\n// Fetch a specific built-in system user\n//\n// Parameters:\n//\t- `userName`\n\nuser, err := client.Users.Get(userName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#UsersService.Get"
        },
        "x-rust": {
          "example": "let user = client.users().get(user_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/users/struct.Users.html#method.get"
        }
      }
    }
  },
  "tags": [
    {
      "name": "hardware"
    },
    {
      "name": "organizations"
    },
    {
      "name": "projects"
    },
    {
      "name": "users"
    },
    {
      "name": "roles"
    },
    {
      "name": "instances"
    },
    {
      "name": "sagas"
    },
    {
      "name": "metrics"
    },
    {
      "name": "networking"
    }
  ]
}
{
  "openapi": "3.0.3",
  "info": {
    "title": "Oxide Region API",
    "description": "API for interacting with the Oxide control plane",
    "contact": {
      "url": "https://oxide.computer",
      "email": "api@oxide.computer"
    },
    "version": "0.0.1",
    "x-go": {
      "client": "// Create a client with your token and host.\nclient, err := oxide.NewClient(\"$OXIDE_TOKEN\", \"your apps user agent\", \"$OXIDE_HOST\")\nif err != nil {\n  panic(err)\n}\n\n// - OR -\n\n// Create a new client with your token and host parsed from the environment\n// variables: OXIDE_TOKEN, OXIDE_HOST.\nclient, err := oxide.NewClientFromEnv(\"your apps user agent\")\nif err != nil {\n  panic(err)\n}",
      "install": "go get github.com/oxidecomputer/oxide.go"
    },
    "x-rust": {
      "client": "use oxide_api::Client;\n\n// Authenticate via an API token.\nlet client = Client::new(\"$OXIDE_TOKEN\", \"$OXIDE_HOST\");\n\n// - OR -\n\n// Authenticate with your token and host parsed from the environment variables:\n// OXIDE_TOKEN, OXIDE_HOST.\nlet client = Client::new_from_env();",
      "install": "[dependencies]\noxide-api = \"0.1.0-rc.13\""
    }
  },
  "paths": {
    "/hardware/racks": {
      "get": {
        "tags": [
          "racks"
        ],
        "description": "List racks in the system.",
        "operationId": "hardware_racks_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RackResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List racks in the system.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n//\t- `sortBy`\n\nrackResultsPage, err := client.Racks.List(limit, pageToken, sortBy)\n\n// - OR -\n\n// ListAllPages\n//\n// List racks in the system.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\n\nRack, err := client.Racks.ListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RacksService.List"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/hardware/racks` endpoint.\n*\n* List racks in the system.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::IdSortModeAscending` -- Supported set of sort modes for scanning by id only.\n*  \n*  Currently, we only support scanning in ascending order.\n*/\nlet vec_crate_types_rack = client.racks().hardware_get(limit, page_token, sort_by).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/hardware/racks` endpoint.\n*\n* As opposed to `hardware_get`, this function returns all the pages of the request at once.\n*\n* List racks in the system.\n*/\nlet vec_crate_types_rack = client.racks().hardware_get_all(sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/racks/struct.Racks.html#method.hardware_get"
        }
      }
    },
    "/hardware/racks/{rack_id}": {
      "get": {
        "tags": [
          "racks"
        ],
        "description": "Fetch information about a particular rack.",
        "operationId": "hardware_racks_get_rack",
        "parameters": [
          {
            "in": "path",
            "name": "rack_id",
            "required": true,
            "schema": {
              "description": "The rack's unique ID.",
              "type": "string",
              "format": "uuid"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rack"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Get\n//\n// Fetch information about a particular rack.\n//\n// Parameters:\n//\t- `rackId`\n\nrack, err := client.Racks.Get(rackID)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RacksService.Get"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/hardware/racks/{rack_id}` endpoint.\n*\n* Fetch information about a particular rack.\n*\n* **Parameters:**\n*\n* * `rack_id: &str` -- human-readable free-form text about a resource.\n*/\nlet rack = client.racks().hardware_get_racks(rack_id).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/racks/struct.Racks.html#method.hardware_get_racks"
        }
      }
    },
    "/hardware/sleds": {
      "get": {
        "tags": [
          "sleds"
        ],
        "description": "List sleds in the system.",
        "operationId": "hardware_sleds_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SledResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List sleds in the system.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n//\t- `sortBy`\n\nsledResultsPage, err := client.Sleds.List(limit, pageToken, sortBy)\n\n// - OR -\n\n// ListAllPages\n//\n// List sleds in the system.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\n\nSled, err := client.Sleds.ListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SledsService.List"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/hardware/sleds` endpoint.\n*\n* List sleds in the system.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::IdSortModeAscending` -- Supported set of sort modes for scanning by id only.\n*  \n*  Currently, we only support scanning in ascending order.\n*/\nlet vec_crate_types_sled = client.sleds().hardware_get(limit, page_token, sort_by).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/hardware/sleds` endpoint.\n*\n* As opposed to `hardware_get`, this function returns all the pages of the request at once.\n*\n* List sleds in the system.\n*/\nlet vec_crate_types_sled = client.sleds().hardware_get_all(sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/sleds/struct.Sleds.html#method.hardware_get"
        }
      }
    },
    "/hardware/sleds/{sled_id}": {
      "get": {
        "tags": [
          "sleds"
        ],
        "description": "Fetch information about a sled in the system.",
        "operationId": "hardware_sleds_get_sled",
        "parameters": [
          {
            "in": "path",
            "name": "sled_id",
            "required": true,
            "schema": {
              "description": "The sled's unique ID.",
              "type": "string",
              "format": "uuid"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sled"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Get\n//\n// Fetch information about a sled in the system.\n//\n// Parameters:\n//\t- `sledId`\n\nsled, err := client.Sleds.Get(sledID)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SledsService.Get"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/hardware/sleds/{sled_id}` endpoint.\n*\n* Fetch information about a sled in the system.\n*\n* **Parameters:**\n*\n* * `sled_id: &str` -- human-readable free-form text about a resource.\n*/\nlet sled = client.sleds().hardware_get_sleds(sled_id).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/sleds/struct.Sleds.html#method.hardware_get_sleds"
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "hidden"
        ],
        "operationId": "spoof_login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": ""
          }
        },
        "x-go": {
          "example": "// SpoofLogin\n\nif err := client.Hidden.SpoofLogin(body); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#HiddenService.SpoofLogin"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/login` endpoint.\n*/\nclient.hidden().spoof_login(body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/hidden/struct.Hidden.html#method.spoof_login"
        }
      }
    },
    "/logout": {
      "post": {
        "tags": [
          "hidden"
        ],
        "operationId": "logout",
        "responses": {
          "default": {
            "description": ""
          }
        },
        "x-go": {
          "example": "// Logout\n\nif err := client.Hidden.Logout(); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#HiddenService.Logout"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/logout` endpoint.\n*/\nclient.hidden().logout().await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/hidden/struct.Hidden.html#method.logout"
        }
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "organizations"
        ],
        "description": "List all organizations.",
        "operationId": "organizations_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List all organizations.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n//\t- `sortBy`\n\norganizationResultsPage, err := client.Organizations.List(limit, pageToken, sortBy)\n\n// - OR -\n\n// ListAllPages\n//\n// List all organizations.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\n\nOrganization, err := client.Organizations.ListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.List"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations` endpoint.\n*\n* List all organizations.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::NameSortMode` -- Supported set of sort modes for scanning by name or id.\n*/\nlet vec_crate_types_rack = client.organizations().get_page(limit, page_token, sort_by).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/organizations` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*\n* List all organizations.\n*/\nlet vec_crate_types_rack = client.organizations().get_all(sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "organizations"
        ],
        "description": "Create a new organization.",
        "operationId": "organizations_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Create\n//\n// Create a new organization.\n\norganization, err := client.Organizations.Create(body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.Create"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations` endpoint.\n*\n* Create a new organization.\n*/\nlet rack = client.organizations().post(body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}": {
      "get": {
        "tags": [
          "organizations"
        ],
        "description": "Fetch a specific organization",
        "operationId": "organizations_get_organization",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Get\n//\n// Fetch a specific organization\n//\n// Parameters:\n//\t- `organizationName`\n\norganization, err := client.Organizations.Get(organizationName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.Get"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}` endpoint.\n*\n* Fetch a specific organization\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n*/\nlet rack = client.organizations().get(organization_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.get"
        }
      },
      "put": {
        "tags": [
          "organizations"
        ],
        "description": "Update a specific organization.\n * TODO-correctness: Is it valid for PUT to accept application/json that's a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.",
        "operationId": "organizations_put_organization",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Put\n//\n// Update a specific organization.\n//  * TODO-correctness: Is it valid for PUT to accept application/json that's a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.\n//\n// Parameters:\n//\t- `organizationName`\n\norganization, err := client.Organizations.Put(organizationName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.Put"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `PUT` to the `/organizations/{organization_name}` endpoint.\n*\n* Update a specific organization.\n*  * TODO-correctness: Is it valid for PUT to accept application/json that's a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n*/\nlet rack = client.organizations().put(organization_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.put"
        }
      },
      "delete": {
        "tags": [
          "organizations"
        ],
        "description": "Delete a specific organization.",
        "operationId": "organizations_delete_organization",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "x-go": {
          "example": "// Delete\n//\n// Delete a specific organization.\n//\n// Parameters:\n//\t- `organizationName`\n\nif err := client.Organizations.Delete(organizationName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#OrganizationsService.Delete"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `DELETE` to the `/organizations/{organization_name}` endpoint.\n*\n* Delete a specific organization.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n*/\nclient.organizations().delete(organization_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/organizations/struct.Organizations.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects": {
      "get": {
        "tags": [
          "projects"
        ],
        "description": "List all projects.",
        "operationId": "organization_projects_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameOrIdSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List all projects.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `sortBy`\n\nprojectResultsPage, err := client.Projects.List(limit, pageToken, sortBy, organizationName)\n\n// - OR -\n\n// ListAllPages\n//\n// List all projects.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `sortBy`\n\nProject, err := client.Projects.ListAllPages(sortBy, organizationName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.List"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects` endpoint.\n*\n* List all projects.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::NameSortMode` -- Supported set of sort modes for scanning by name or id.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vec_crate_types_project = client.projects().get_page(limit, page_token, sort_by, organization_name).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*\n* List all projects.\n*/\nlet vec_crate_types_project = client.projects().get_all(sort_by, organization_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "projects"
        ],
        "description": "Create a new project.",
        "operationId": "organization_projects_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Create\n//\n// Create a new project.\n//\n// Parameters:\n//\t- `organizationName`\n\nproject, err := client.Projects.Create(organizationName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.Create"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects` endpoint.\n*\n* Create a new project.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n*/\nlet project = client.projects().post(organization_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}": {
      "get": {
        "tags": [
          "projects"
        ],
        "description": "Fetch a specific project",
        "operationId": "organization_projects_get_project",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Get\n//\n// Fetch a specific project\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n\nproject, err := client.Projects.Get(organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.Get"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}` endpoint.\n*\n* Fetch a specific project\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet project = client.projects().get(organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.get"
        }
      },
      "put": {
        "tags": [
          "projects"
        ],
        "description": "Update a specific project.\n * TODO-correctness: Is it valid for PUT to accept application/json that's a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.",
        "operationId": "organization_projects_put_project",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Put\n//\n// Update a specific project.\n//  * TODO-correctness: Is it valid for PUT to accept application/json that's a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n\nproject, err := client.Projects.Put(organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.Put"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `PUT` to the `/organizations/{organization_name}/projects/{project_name}` endpoint.\n*\n* Update a specific project.\n*  * TODO-correctness: Is it valid for PUT to accept application/json that's a subset of what the resource actually represents?  If not, is that a problem? (HTTP may require that this be idempotent.)  If so, can we get around that having this be a slightly different content-type (e.g., \"application/json-patch\")?  We should see what other APIs do.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet project = client.projects().put(organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.put"
        }
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "description": "Delete a specific project.",
        "operationId": "organization_projects_delete_project",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "x-go": {
          "example": "// Delete\n//\n// Delete a specific project.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n\nif err := client.Projects.Delete(organizationName, projectName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#ProjectsService.Delete"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}` endpoint.\n*\n* Delete a specific project.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nclient.projects().delete(organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/projects/struct.Projects.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/disks": {
      "get": {
        "tags": [
          "disks"
        ],
        "description": "List disks in a project.",
        "operationId": "project_disks_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiskResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List disks in a project.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n\ndiskResultsPage, err := client.Disks.List(limit, pageToken, sortBy, organizationName, projectName)\n\n// - OR -\n\n// ListAllPages\n//\n// List disks in a project.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n\nDisk, err := client.Disks.ListAllPages(sortBy, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#DisksService.List"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/disks` endpoint.\n*\n* List disks in a project.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::NameSortModeAscending` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vec_crate_types_disk = client.disks().get_page(limit, page_token, sort_by, organization_name, project_name).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/disks` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*\n* List disks in a project.\n*/\nlet vec_crate_types_disk = client.disks().get_all(sort_by, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/disks/struct.Disks.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "disks"
        ],
        "description": "Create a disk in a project.\n * TODO-correctness See note about instance create.  This should be async.",
        "operationId": "project_disks_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Create\n//\n// Create a disk in a project.\n//  * TODO-correctness See note about instance create.  This should be async.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n\ndisk, err := client.Disks.Create(organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#DisksService.Create"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/disks` endpoint.\n*\n* Create a disk in a project.\n*  * TODO-correctness See note about instance create.  This should be async.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet disk = client.disks().post(organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/disks/struct.Disks.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/disks/{disk_name}": {
      "get": {
        "tags": [
          "disks"
        ],
        "description": "Fetch a single disk in a project.",
        "operationId": "project_disks_get_disk",
        "parameters": [
          {
            "in": "path",
            "name": "disk_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Get\n//\n// Fetch a single disk in a project.\n//\n// Parameters:\n//\t- `diskName`\n//\t- `organizationName`\n//\t- `projectName`\n\ndisk, err := client.Disks.Get(diskName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#DisksService.Get"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/disks/{disk_name}` endpoint.\n*\n* Fetch a single disk in a project.\n*\n* **Parameters:**\n*\n* * `disk_name: &str` -- human-readable free-form text about a resource.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet disk = client.disks().get(disk_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/disks/struct.Disks.html#method.get"
        }
      },
      "delete": {
        "tags": [
          "disks"
        ],
        "description": "Delete a disk from a project.",
        "operationId": "project_disks_delete_disk",
        "parameters": [
          {
            "in": "path",
            "name": "disk_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "x-go": {
          "example": "// Delete\n//\n// Delete a disk from a project.\n//\n// Parameters:\n//\t- `diskName`\n//\t- `organizationName`\n//\t- `projectName`\n\nif err := client.Disks.Delete(diskName, organizationName, projectName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#DisksService.Delete"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/disks/{disk_name}` endpoint.\n*\n* Delete a disk from a project.\n*\n* **Parameters:**\n*\n* * `disk_name: &str` -- human-readable free-form text about a resource.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nclient.disks().delete(disk_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/disks/struct.Disks.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances": {
      "get": {
        "tags": [
          "instances"
        ],
        "description": "List instances in a project.",
        "operationId": "project_instances_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List instances in a project.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n\ninstanceResultsPage, err := client.Instances.List(limit, pageToken, sortBy, organizationName, projectName)\n\n// - OR -\n\n// ListAllPages\n//\n// List instances in a project.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n\nInstance, err := client.Instances.ListAllPages(sortBy, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.List"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/instances` endpoint.\n*\n* List instances in a project.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::NameSortModeAscending` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vec_crate_types_instance = client.instances().get_page(limit, page_token, sort_by, organization_name, project_name).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/instances` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*\n* List instances in a project.\n*/\nlet vec_crate_types_instance = client.instances().get_all(sort_by, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "instances"
        ],
        "description": "Create an instance in a project.\n * TODO-correctness This is supposed to be async.  Is that right?  We can create the instance immediately -- it's just not booted yet.  Maybe the boot operation is what's a separate operation_id.  What about the response code (201 Created vs 202 Accepted)?  Is that orthogonal?  Things can return a useful response, including an operation id, with either response code.  Maybe a \"reboot\" operation would return a 202 Accepted because there's no actual resource created?",
        "operationId": "project_instances_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Create\n//\n// Create an instance in a project.\n//  * TODO-correctness This is supposed to be async.  Is that right?  We can create the instance immediately -- it's just not booted yet.  Maybe the boot operation is what's a separate operation_id.  What about the response code (201 Created vs 202 Accepted)?  Is that orthogonal?  Things can return a useful response, including an operation id, with either response code.  Maybe a \"reboot\" operation would return a 202 Accepted because there's no actual resource created?\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n\ninstance, err := client.Instances.Create(organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Create"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances` endpoint.\n*\n* Create an instance in a project.\n*  * TODO-correctness This is supposed to be async.  Is that right?  We can create the instance immediately -- it's just not booted yet.  Maybe the boot operation is what's a separate operation_id.  What about the response code (201 Created vs 202 Accepted)?  Is that orthogonal?  Things can return a useful response, including an operation id, with either response code.  Maybe a \"reboot\" operation would return a 202 Accepted because there's no actual resource created?\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet instance = client.instances().post(organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}": {
      "get": {
        "tags": [
          "instances"
        ],
        "description": "Get an instance in a project.",
        "operationId": "project_instances_get_instance",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Get\n//\n// Get an instance in a project.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\ninstance, err := client.Instances.Get(instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Get"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}` endpoint.\n*\n* Get an instance in a project.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- human-readable free-form text about a resource.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet instance = client.instances().get(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.get"
        }
      },
      "delete": {
        "tags": [
          "instances"
        ],
        "description": "Delete an instance from a project.",
        "operationId": "project_instances_delete_instance",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "x-go": {
          "example": "// Delete\n//\n// Delete an instance from a project.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\nif err := client.Instances.Delete(instanceName, organizationName, projectName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Delete"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}` endpoint.\n*\n* Delete an instance from a project.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- human-readable free-form text about a resource.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nclient.instances().delete(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks": {
      "get": {
        "tags": [
          "instances"
        ],
        "description": "List disks attached to this instance.",
        "operationId": "instance_disks_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiskResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// DisksList\n//\n// List disks attached to this instance.\n//\n// To iterate over all pages, use the `DisksListAllPages` method, instead.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n\ndiskResultsPage, err := client.Instances.DisksList(limit, pageToken, sortBy, instanceName, organizationName, projectName)\n\n// - OR -\n\n// DisksListAllPages\n//\n// List disks attached to this instance.\n//\n// This method is a wrapper around the `DisksList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n\nDisk, err := client.Instances.DisksListAllPages(sortBy, instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.DisksList"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks` endpoint.\n*\n* List disks attached to this instance.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::NameSortModeAscending` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `instance_name: &str` -- human-readable free-form text about a resource.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vec_crate_types_disk = client.instances().disks_get(limit, page_token, sort_by, instance_name, organization_name, project_name).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks` endpoint.\n*\n* As opposed to `disks_get`, this function returns all the pages of the request at once.\n*\n* List disks attached to this instance.\n*/\nlet vec_crate_types_disk = client.instances().disks_get_all(sort_by, instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.disks_get"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks/attach": {
      "post": {
        "tags": [
          "instances"
        ],
        "operationId": "instance_disks_attach",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskIdentifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// DisksAttach\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\ndisk, err := client.Instances.DisksAttach(instanceName, organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.DisksAttach"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks/attach` endpoint.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- human-readable free-form text about a resource.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet disk = client.instances().disks_attach(instance_name, organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.disks_attach"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks/detach": {
      "post": {
        "tags": [
          "instances"
        ],
        "operationId": "instance_disks_detach",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DiskIdentifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Disk"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// DisksDetach\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\ndisk, err := client.Instances.DisksDetach(instanceName, organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.DisksDetach"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/disks/detach` endpoint.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- human-readable free-form text about a resource.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet disk = client.instances().disks_detach(instance_name, organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.disks_detach"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/reboot": {
      "post": {
        "tags": [
          "instances"
        ],
        "description": "Reboot an instance.",
        "operationId": "project_instances_instance_reboot",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Reboot\n//\n// Reboot an instance.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\ninstance, err := client.Instances.Reboot(instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Reboot"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/reboot` endpoint.\n*\n* Reboot an instance.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- human-readable free-form text about a resource.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet instance = client.instances().reboot(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.reboot"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/start": {
      "post": {
        "tags": [
          "instances"
        ],
        "description": "Boot an instance.",
        "operationId": "project_instances_instance_start",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Start\n//\n// Boot an instance.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\ninstance, err := client.Instances.Start(instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Start"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/start` endpoint.\n*\n* Boot an instance.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- human-readable free-form text about a resource.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet instance = client.instances().start(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.start"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/stop": {
      "post": {
        "tags": [
          "instances"
        ],
        "description": "Halt an instance.",
        "operationId": "project_instances_instance_stop",
        "parameters": [
          {
            "in": "path",
            "name": "instance_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "202": {
            "description": "successfully enqueued operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Instance"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Stop\n//\n// Halt an instance.\n//\n// Parameters:\n//\t- `instanceName`\n//\t- `organizationName`\n//\t- `projectName`\n\ninstance, err := client.Instances.Stop(instanceName, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#InstancesService.Stop"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/instances/{instance_name}/stop` endpoint.\n*\n* Halt an instance.\n*\n* **Parameters:**\n*\n* * `instance_name: &str` -- human-readable free-form text about a resource.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet instance = client.instances().stop(instance_name, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/instances/struct.Instances.html#method.stop"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "description": "List VPCs in a project.",
        "operationId": "project_vpcs_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List VPCs in a project.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n\nvPCResultsPage, err := client.Vpcs.List(limit, pageToken, sortBy, organizationName, projectName)\n\n// - OR -\n\n// ListAllPages\n//\n// List VPCs in a project.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n\nVPC, err := client.Vpcs.ListAllPages(sortBy, organizationName, projectName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#VpcsService.List"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs` endpoint.\n*\n* List VPCs in a project.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::NameSortModeAscending` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vec_crate_types_vpc = client.vpcs().get_page(limit, page_token, sort_by, organization_name, project_name).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*\n* List VPCs in a project.\n*/\nlet vec_crate_types_vpc = client.vpcs().get_all(sort_by, organization_name, project_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/vpcs/struct.Vpcs.html#method.get_page"
        }
      },
      "post": {
        "tags": [
          "vpcs"
        ],
        "description": "Create a VPC in a project.",
        "operationId": "project_vpcs_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vpc"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Create\n//\n// Create a VPC in a project.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n\nvPC, err := client.Vpcs.Create(organizationName, projectName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#VpcsService.Create"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/vpcs` endpoint.\n*\n* Create a VPC in a project.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vpc = client.vpcs().post(organization_name, project_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/vpcs/struct.Vpcs.html#method.post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}": {
      "get": {
        "tags": [
          "vpcs"
        ],
        "description": "Get a VPC in a project.",
        "operationId": "project_vpcs_get_vpc",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Vpc"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Get\n//\n// Get a VPC in a project.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\n\nvPC, err := client.Vpcs.Get(organizationName, projectName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#VpcsService.Get"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}` endpoint.\n*\n* Get a VPC in a project.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vpc = client.vpcs().get(organization_name, project_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/vpcs/struct.Vpcs.html#method.get"
        }
      },
      "put": {
        "tags": [
          "vpcs"
        ],
        "description": "Update a VPC.",
        "operationId": "project_vpcs_put_vpc",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          }
        },
        "x-go": {
          "example": "// Put\n//\n// Update a VPC.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\n\nif err := client.Vpcs.Put(organizationName, projectName, vpcName, body); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#VpcsService.Put"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `PUT` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}` endpoint.\n*\n* Update a VPC.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nclient.vpcs().put(organization_name, project_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/vpcs/struct.Vpcs.html#method.put"
        }
      },
      "delete": {
        "tags": [
          "vpcs"
        ],
        "description": "Delete a vpc from a project.",
        "operationId": "project_vpcs_delete_vpc",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "x-go": {
          "example": "// Delete\n//\n// Delete a vpc from a project.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\n\nif err := client.Vpcs.Delete(organizationName, projectName, vpcName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#VpcsService.Delete"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}` endpoint.\n*\n* Delete a vpc from a project.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nclient.vpcs().delete(organization_name, project_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/vpcs/struct.Vpcs.html#method.delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/firewall/rules": {
      "get": {
        "tags": [
          "firewall"
        ],
        "description": "List firewall rules for a VPC.",
        "operationId": "vpc_firewall_rules_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcFirewallRuleResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// RulesList\n//\n// List firewall rules for a VPC.\n//\n// To iterate over all pages, use the `RulesListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nfirewallRuleResultsPage, err := client.Firewall.RulesList(limit, pageToken, sortBy, organizationName, projectName, vpcName)\n\n// - OR -\n\n// RulesListAllPages\n//\n// List firewall rules for a VPC.\n//\n// This method is a wrapper around the `RulesList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nFirewallRule, err := client.Firewall.RulesListAllPages(sortBy, organizationName, projectName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#FirewallService.RulesList"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/firewall/rules` endpoint.\n*\n* List firewall rules for a VPC.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::NameSortModeAscending` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vec_crate_types_vpc_firewall_rule = client.firewall().vpc_rules_get(limit, page_token, sort_by, organization_name, project_name, vpc_name).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/firewall/rules` endpoint.\n*\n* As opposed to `vpc_rules_get`, this function returns all the pages of the request at once.\n*\n* List firewall rules for a VPC.\n*/\nlet vec_crate_types_vpc_firewall_rule = client.firewall().vpc_rules_get_all(sort_by, organization_name, project_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/firewall/struct.Firewall.html#method.vpc_rules_get"
        }
      },
      "put": {
        "tags": [
          "firewall"
        ],
        "description": "Replace the firewall rules for a VPC",
        "operationId": "vpc_firewall_rules_put",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcFirewallRuleUpdateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcFirewallRuleUpdateResult"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// RulesPut\n//\n// Replace the firewall rules for a VPC\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\n\nfirewallRuleUpdateResult, err := client.Firewall.RulesPut(organizationName, projectName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#FirewallService.RulesPut"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `PUT` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/firewall/rules` endpoint.\n*\n* Replace the firewall rules for a VPC\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vpc_firewall_rule = client.firewall().vpc_rules_put(organization_name, project_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/firewall/struct.Firewall.html#method.vpc_rules_put"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers": {
      "get": {
        "tags": [
          "routers"
        ],
        "description": "List VPC Custom and System Routers",
        "operationId": "vpc_routers_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouterResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List VPC Custom and System Routers\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nrouterResultsPage, err := client.Routers.List(limit, pageToken, sortBy, organizationName, projectName, vpcName)\n\n// - OR -\n\n// ListAllPages\n//\n// List VPC Custom and System Routers\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nRouter, err := client.Routers.ListAllPages(sortBy, organizationName, projectName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutersService.List"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers` endpoint.\n*\n* List VPC Custom and System Routers\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::NameSortModeAscending` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vec_crate_types_vpc_router = client.routers().vpc_get(limit, page_token, sort_by, organization_name, project_name, vpc_name).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers` endpoint.\n*\n* As opposed to `vpc_get`, this function returns all the pages of the request at once.\n*\n* List VPC Custom and System Routers\n*/\nlet vec_crate_types_vpc_router = client.routers().vpc_get_all(sort_by, organization_name, project_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routers/struct.Routers.html#method.vpc_get"
        }
      },
      "post": {
        "tags": [
          "routers"
        ],
        "description": "Create a VPC Router",
        "operationId": "vpc_routers_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcRouterCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouter"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Create\n//\n// Create a VPC Router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\n\nrouter, err := client.Routers.Create(organizationName, projectName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutersService.Create"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers` endpoint.\n*\n* Create a VPC Router\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vpc_router = client.routers().vpc_post(organization_name, project_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routers/struct.Routers.html#method.vpc_post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}": {
      "get": {
        "tags": [
          "routers"
        ],
        "description": "Get a VPC Router",
        "operationId": "vpc_routers_get_router",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcRouter"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Get\n//\n// Get a VPC Router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `vpcName`\n\nrouter, err := client.Routers.Get(organizationName, projectName, routerName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutersService.Get"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}` endpoint.\n*\n* Get a VPC Router\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `router_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vpc_router = client.routers().vpc_get_routers(organization_name, project_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routers/struct.Routers.html#method.vpc_get_routers"
        }
      },
      "put": {
        "tags": [
          "routers"
        ],
        "description": "Update a VPC Router",
        "operationId": "vpc_routers_put_router",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcRouterUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          }
        },
        "x-go": {
          "example": "// Put\n//\n// Update a VPC Router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `vpcName`\n\nif err := client.Routers.Put(organizationName, projectName, routerName, vpcName, body); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutersService.Put"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `PUT` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}` endpoint.\n*\n* Update a VPC Router\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `router_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nclient.routers().vpc_put(organization_name, project_name, router_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routers/struct.Routers.html#method.vpc_put"
        }
      },
      "delete": {
        "tags": [
          "routers"
        ],
        "description": "Delete a router from its VPC",
        "operationId": "vpc_routers_delete_router",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "x-go": {
          "example": "// Delete\n//\n// Delete a router from its VPC\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `vpcName`\n\nif err := client.Routers.Delete(organizationName, projectName, routerName, vpcName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutersService.Delete"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}` endpoint.\n*\n* Delete a router from its VPC\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `router_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nclient.routers().vpc_delete(organization_name, project_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routers/struct.Routers.html#method.vpc_delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes": {
      "get": {
        "tags": [
          "routes"
        ],
        "description": "List a Router's routes",
        "operationId": "routers_routes_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRouteResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// rsList\n//\n// List a Router's routes\n//\n// To iterate over all pages, use the `rsListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nrouterRouteResultsPage, err := client.Routes.rsList(limit, pageToken, sortBy, organizationName, projectName, routerName, vpcName)\n\n// - OR -\n\n// rsListAllPages\n//\n// List a Router's routes\n//\n// This method is a wrapper around the `rsList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nRouterRoute, err := client.Routes.rsListAllPages(sortBy, organizationName, projectName, routerName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutesService.rsList"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes` endpoint.\n*\n* List a Router's routes\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::NameSortModeAscending` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `router_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vec_crate_types_router_route = client.routes().routers_get(limit, page_token, sort_by, organization_name, project_name, router_name, vpc_name).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes` endpoint.\n*\n* As opposed to `routers_get`, this function returns all the pages of the request at once.\n*\n* List a Router's routes\n*/\nlet vec_crate_types_router_route = client.routes().routers_get_all(sort_by, organization_name, project_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routes/struct.Routes.html#method.routers_get"
        }
      },
      "post": {
        "tags": [
          "routes"
        ],
        "description": "Create a VPC Router",
        "operationId": "routers_routes_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouterRouteCreateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRoute"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// rsCreate\n//\n// Create a VPC Router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routerName`\n//\t- `vpcName`\n\nrouterRoute, err := client.Routes.rsCreate(organizationName, projectName, routerName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutesService.rsCreate"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes` endpoint.\n*\n* Create a VPC Router\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `router_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nlet router_route = client.routes().routers_post(organization_name, project_name, router_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routes/struct.Routes.html#method.routers_post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes/{route_name}": {
      "get": {
        "tags": [
          "routes"
        ],
        "description": "Get a VPC Router route",
        "operationId": "routers_routes_get_route",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "route_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RouterRoute"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// rsGet\n//\n// Get a VPC Router route\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routeName`\n//\t- `routerName`\n//\t- `vpcName`\n\nrouterRoute, err := client.Routes.rsGet(organizationName, projectName, routeName, routerName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutesService.rsGet"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes/{route_name}` endpoint.\n*\n* Get a VPC Router route\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `route_name: &str` -- human-readable free-form text about a resource.\n* * `router_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nlet router_route = client.routes().routers_get_routes(organization_name, project_name, route_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routes/struct.Routes.html#method.routers_get_routes"
        }
      },
      "put": {
        "tags": [
          "routes"
        ],
        "description": "Update a Router route",
        "operationId": "routers_routes_put_route",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "route_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouterRouteUpdateParams"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          }
        },
        "x-go": {
          "example": "// rsPut\n//\n// Update a Router route\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routeName`\n//\t- `routerName`\n//\t- `vpcName`\n\nif err := client.Routes.rsPut(organizationName, projectName, routeName, routerName, vpcName, body); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutesService.rsPut"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `PUT` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes/{route_name}` endpoint.\n*\n* Update a Router route\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `route_name: &str` -- human-readable free-form text about a resource.\n* * `router_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nclient.routes().routers_put(organization_name, project_name, route_name, router_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routes/struct.Routes.html#method.routers_put"
        }
      },
      "delete": {
        "tags": [
          "routes"
        ],
        "description": "Delete a route from its router",
        "operationId": "routers_routes_delete_route",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "route_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "router_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "x-go": {
          "example": "// rsDelete\n//\n// Delete a route from its router\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `routeName`\n//\t- `routerName`\n//\t- `vpcName`\n\nif err := client.Routes.rsDelete(organizationName, projectName, routeName, routerName, vpcName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RoutesService.rsDelete"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/routers/{router_name}/routes/{route_name}` endpoint.\n*\n* Delete a route from its router\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `route_name: &str` -- human-readable free-form text about a resource.\n* * `router_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nclient.routes().routers_delete(organization_name, project_name, route_name, router_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/routes/struct.Routes.html#method.routers_delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets": {
      "get": {
        "tags": [
          "subnets"
        ],
        "description": "List subnets in a VPC.",
        "operationId": "vpc_subnets_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnetResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List subnets in a VPC.\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nsubnetResultsPage, err := client.Subnets.List(limit, pageToken, sortBy, organizationName, projectName, vpcName)\n\n// - OR -\n\n// ListAllPages\n//\n// List subnets in a VPC.\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `vpcName`\n\nSubnet, err := client.Subnets.ListAllPages(sortBy, organizationName, projectName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SubnetsService.List"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets` endpoint.\n*\n* List subnets in a VPC.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::NameSortModeAscending` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vec_crate_types_vpc_subnet = client.subnets().vpc_get(limit, page_token, sort_by, organization_name, project_name, vpc_name).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets` endpoint.\n*\n* As opposed to `vpc_get`, this function returns all the pages of the request at once.\n*\n* List subnets in a VPC.\n*/\nlet vec_crate_types_vpc_subnet = client.subnets().vpc_get_all(sort_by, organization_name, project_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/subnets/struct.Subnets.html#method.vpc_get"
        }
      },
      "post": {
        "tags": [
          "subnets"
        ],
        "description": "Create a subnet in a VPC.",
        "operationId": "vpc_subnets_post",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcSubnetCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "successful creation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnet"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Create\n//\n// Create a subnet in a VPC.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `vpcName`\n\nsubnet, err := client.Subnets.Create(organizationName, projectName, vpcName, body)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SubnetsService.Create"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `POST` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets` endpoint.\n*\n* Create a subnet in a VPC.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vpc_subnet = client.subnets().vpc_post(organization_name, project_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/subnets/struct.Subnets.html#method.vpc_post"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}": {
      "get": {
        "tags": [
          "subnets"
        ],
        "description": "Get subnet in a VPC.",
        "operationId": "vpc_subnets_get_subnet",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subnet_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcSubnet"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Get\n//\n// Get subnet in a VPC.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `subnetName`\n//\t- `vpcName`\n\nsubnet, err := client.Subnets.Get(organizationName, projectName, subnetName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SubnetsService.Get"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}` endpoint.\n*\n* Get subnet in a VPC.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `subnet_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vpc_subnet = client.subnets().vpc_get_subnets(organization_name, project_name, subnet_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/subnets/struct.Subnets.html#method.vpc_get_subnets"
        }
      },
      "put": {
        "tags": [
          "subnets"
        ],
        "description": "Update a VPC Subnet.",
        "operationId": "vpc_subnets_put_subnet",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subnet_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcSubnetUpdate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "resource updated"
          }
        },
        "x-go": {
          "example": "// Put\n//\n// Update a VPC Subnet.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `subnetName`\n//\t- `vpcName`\n\nif err := client.Subnets.Put(organizationName, projectName, subnetName, vpcName, body); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SubnetsService.Put"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `PUT` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}` endpoint.\n*\n* Update a VPC Subnet.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `subnet_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nclient.subnets().vpc_put(organization_name, project_name, subnet_name, vpc_name, body).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/subnets/struct.Subnets.html#method.vpc_put"
        }
      },
      "delete": {
        "tags": [
          "subnets"
        ],
        "description": "Delete a subnet from a VPC.",
        "operationId": "vpc_subnets_delete_subnet",
        "parameters": [
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subnet_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "204": {
            "description": "successful deletion"
          }
        },
        "x-go": {
          "example": "// Delete\n//\n// Delete a subnet from a VPC.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `subnetName`\n//\t- `vpcName`\n\nif err := client.Subnets.Delete(organizationName, projectName, subnetName, vpcName); err != nil {\n\tpanic(err)\n}",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SubnetsService.Delete"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `DELETE` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}` endpoint.\n*\n* Delete a subnet from a VPC.\n*\n* **Parameters:**\n*\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `subnet_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nclient.subnets().vpc_delete(organization_name, project_name, subnet_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/subnets/struct.Subnets.html#method.vpc_delete"
        }
      }
    },
    "/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}/ips": {
      "get": {
        "tags": [
          "subnets"
        ],
        "description": "List IP addresses on a VPC subnet.",
        "operationId": "subnets_ips_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          },
          {
            "in": "path",
            "name": "organization_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "project_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "subnet_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          },
          {
            "in": "path",
            "name": "vpc_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkInterfaceResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// IPsList\n//\n// List IP addresses on a VPC subnet.\n//\n// To iterate over all pages, use the `IPsListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `organizationName`\n//\t- `pageToken`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `subnetName`\n//\t- `vpcName`\n\nnetworkInterfaceResultsPage, err := client.Subnets.IPsList(limit, pageToken, sortBy, organizationName, projectName, subnetName, vpcName)\n\n// - OR -\n\n// IPsListAllPages\n//\n// List IP addresses on a VPC subnet.\n//\n// This method is a wrapper around the `IPsList` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `organizationName`\n//\t- `projectName`\n//\t- `sortBy`\n//\t- `subnetName`\n//\t- `vpcName`\n\nNetworkInterface, err := client.Subnets.IPsListAllPages(sortBy, organizationName, projectName, subnetName, vpcName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SubnetsService.IPsList"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}/ips` endpoint.\n*\n* List IP addresses on a VPC subnet.\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::NameSortModeAscending` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n* * `organization_name: &str` -- human-readable free-form text about a resource.\n* * `project_name: &str` -- human-readable free-form text about a resource.\n* * `subnet_name: &str` -- human-readable free-form text about a resource.\n* * `vpc_name: &str` -- human-readable free-form text about a resource.\n*/\nlet vec_crate_types_network_interface = client.subnets().ips_get(limit, page_token, sort_by, organization_name, project_name, subnet_name, vpc_name).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/organizations/{organization_name}/projects/{project_name}/vpcs/{vpc_name}/subnets/{subnet_name}/ips` endpoint.\n*\n* As opposed to `ips_get`, this function returns all the pages of the request at once.\n*\n* List IP addresses on a VPC subnet.\n*/\nlet vec_crate_types_network_interface = client.subnets().ips_get_all(sort_by, organization_name, project_name, subnet_name, vpc_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/subnets/struct.Subnets.html#method.ips_get"
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "description": "List the built-in roles",
        "operationId": "roles_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List the built-in roles\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n\nroleResultsPage, err := client.Roles.List(limit, pageToken)\n\n// - OR -\n\n// ListAllPages\n//\n// List the built-in roles\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n\nRole, err := client.Roles.ListAllPages(,)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RolesService.List"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/roles` endpoint.\n*\n* List the built-in roles\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n*/\nlet vec_crate_types_role = client.roles().get_page(limit, page_token).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/roles` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*\n* List the built-in roles\n*/\nlet vec_crate_types_role = client.roles().get_all().await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/roles/struct.Roles.html#method.get_page"
        }
      }
    },
    "/roles/{role_name}": {
      "get": {
        "tags": [
          "roles"
        ],
        "description": "Fetch a specific built-in role",
        "operationId": "roles_get_role",
        "parameters": [
          {
            "in": "path",
            "name": "role_name",
            "required": true,
            "schema": {
              "description": "The built-in role's unique name.",
              "type": "string"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Get\n//\n// Fetch a specific built-in role\n//\n// Parameters:\n//\t- `roleName`\n\nrole, err := client.Roles.Get(roleName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#RolesService.Get"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/roles/{role_name}` endpoint.\n*\n* Fetch a specific built-in role\n*\n* **Parameters:**\n*\n* * `role_name: &str` -- human-readable free-form text about a resource.\n*/\nlet role = client.roles().get(role_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/roles/struct.Roles.html#method.get"
        }
      }
    },
    "/sagas": {
      "get": {
        "tags": [
          "sagas"
        ],
        "description": "List all sagas (for debugging)",
        "operationId": "sagas_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/IdSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SagaResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List all sagas (for debugging)\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n//\t- `sortBy`\n\nsagaResultsPage, err := client.Sagas.List(limit, pageToken, sortBy)\n\n// - OR -\n\n// ListAllPages\n//\n// List all sagas (for debugging)\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\n\nSaga, err := client.Sagas.ListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SagasService.List"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/sagas` endpoint.\n*\n* List all sagas (for debugging)\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::IdSortModeAscending` -- Supported set of sort modes for scanning by id only.\n*  \n*  Currently, we only support scanning in ascending order.\n*/\nlet vec_crate_types_saga = client.sagas().get_page(limit, page_token, sort_by).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/sagas` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*\n* List all sagas (for debugging)\n*/\nlet vec_crate_types_saga = client.sagas().get_all(sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/sagas/struct.Sagas.html#method.get_page"
        }
      }
    },
    "/sagas/{saga_id}": {
      "get": {
        "tags": [
          "sagas"
        ],
        "description": "Fetch information about a single saga (for debugging)",
        "operationId": "sagas_get_saga",
        "parameters": [
          {
            "in": "path",
            "name": "saga_id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Saga"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Get\n//\n// Fetch information about a single saga (for debugging)\n//\n// Parameters:\n//\t- `sagaId`\n\nsaga, err := client.Sagas.Get(sagaID)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#SagasService.Get"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/sagas/{saga_id}` endpoint.\n*\n* Fetch information about a single saga (for debugging)\n*\n* **Parameters:**\n*\n* * `saga_id: &str` -- human-readable free-form text about a resource.\n*/\nlet saga = client.sagas().get(saga_id).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/sagas/struct.Sagas.html#method.get"
        }
      }
    },
    "/session/me": {
      "get": {
        "tags": [
          "hidden"
        ],
        "description": "Fetch the user associated with the current session",
        "operationId": "session_me",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionUser"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// SessionMe\n//\n// Fetch the user associated with the current session\n\nsessionUser, err := client.Hidden.SessionMe()",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#HiddenService.SessionMe"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/session/me` endpoint.\n*\n* Fetch the user associated with the current session\n*/\nlet session_user = client.hidden().session_me().await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/hidden/struct.Hidden.html#method.session_me"
        }
      }
    },
    "/timeseries/schema": {
      "get": {
        "tags": [
          "metrics"
        ],
        "description": "List all timeseries schema",
        "operationId": "timeseries_schema_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TimeseriesSchemaResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// TimeseriesSchemaList\n//\n// List all timeseries schema\n//\n// To iterate over all pages, use the `TimeseriesSchemaListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n\ntimeseriesSchemaResultsPage, err := client.Metrics.TimeseriesSchemaList(limit, pageToken)\n\n// - OR -\n\n// TimeseriesSchemaListAllPages\n//\n// List all timeseries schema\n//\n// This method is a wrapper around the `TimeseriesSchemaList` method.\n// This method returns all the pages at once.\n\nTimeseriesSchema, err := client.Metrics.TimeseriesSchemaListAllPages(,)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#MetricsService.TimeseriesSchemaList"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/timeseries/schema` endpoint.\n*\n* List all timeseries schema\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n*/\nlet vec_crate_types_timeseries_schema = client.metrics().timeseries_schema_get(limit, page_token).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/timeseries/schema` endpoint.\n*\n* As opposed to `timeseries_schema_get`, this function returns all the pages of the request at once.\n*\n* List all timeseries schema\n*/\nlet vec_crate_types_timeseries_schema = client.metrics().timeseries_schema_get_all().await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/metrics/struct.Metrics.html#method.timeseries_schema_get"
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "description": "List the built-in system users",
        "operationId": "users_get",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "nullable": true,
              "description": "Maximum number of items returned by a single call",
              "type": "integer",
              "format": "uint32",
              "minimum": 1
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "page_token",
            "schema": {
              "nullable": true,
              "description": "Token returned by previous call to retreive the subsequent page",
              "type": "string"
            },
            "style": "form"
          },
          {
            "in": "query",
            "name": "sort_by",
            "schema": {
              "$ref": "#/components/schemas/NameSortMode"
            },
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResultsPage"
                }
              }
            }
          }
        },
        "x-dropshot-pagination": true,
        "x-go": {
          "example": "// List\n//\n// List the built-in system users\n//\n// To iterate over all pages, use the `ListAllPages` method, instead.\n//\n// Parameters:\n//\t- `limit`\n//\t- `pageToken`\n//\t- `sortBy`\n\nuserResultsPage, err := client.Users.List(limit, pageToken, sortBy)\n\n// - OR -\n\n// ListAllPages\n//\n// List the built-in system users\n//\n// This method is a wrapper around the `List` method.\n// This method returns all the pages at once.\n//\n// Parameters:\n//\t- `sortBy`\n\nUser, err := client.Users.ListAllPages(sortBy)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#UsersService.List"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/users` endpoint.\n*\n* List the built-in system users\n*\n* **Parameters:**\n*\n* * `limit: u32` -- A count of bytes, typically used either for memory or storage capacity\n*  \n*  The maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.\n* * `page_token: &str` -- human-readable free-form text about a resource.\n* * `sort_by: crate::types::NameSortModeAscending` -- Supported set of sort modes for scanning by name only\n*  \n*  Currently, we only support scanning in ascending order.\n*/\nlet vec_crate_types_rack = client.users().get_page(limit, page_token, sort_by).await?;\n\n// - OR -\n\n/**\n* This function performs a `GET` to the `/users` endpoint.\n*\n* As opposed to `get`, this function returns all the pages of the request at once.\n*\n* List the built-in system users\n*/\nlet vec_crate_types_rack = client.users().get_all(sort_by).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/users/struct.Users.html#method.get_page"
        }
      }
    },
    "/users/{user_name}": {
      "get": {
        "tags": [
          "users"
        ],
        "description": "Fetch a specific built-in system user",
        "operationId": "users_get_user",
        "parameters": [
          {
            "in": "path",
            "name": "user_name",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Name"
            },
            "style": "simple"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "x-go": {
          "example": "// Get\n//\n// Fetch a specific built-in system user\n//\n// Parameters:\n//\t- `userName`\n\nuser, err := client.Users.Get(userName)",
          "libDocsLink": "https://pkg.go.dev/github.com/oxidecomputer/oxide.go/#UsersService.Get"
        },
        "x-rust": {
          "example": "/**\n* This function performs a `GET` to the `/users/{user_name}` endpoint.\n*\n* Fetch a specific built-in system user\n*\n* **Parameters:**\n*\n* * `user_name: &str` -- human-readable free-form text about a resource.\n*/\nlet rack = client.users().get(user_name).await?;",
          "libDocsLink": "https://docs.rs/oxide-api/latest/oxide_api/users/struct.Users.html#method.get"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ByteCount": {
        "description": "A count of bytes, typically used either for memory or storage capacity\n\nThe maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience.",
        "type": "integer",
        "format": "uint64",
        "minimum": 0
      },
      "DatumType": {
        "description": "The type of an individual datum of a metric.",
        "type": "string",
        "enum": [
          "Bool",
          "I64",
          "F64",
          "String",
          "Bytes",
          "CumulativeI64",
          "CumulativeF64",
          "HistogramI64",
          "HistogramF64"
        ]
      },
      "Disk": {
        "description": "Client view of an [`Disk`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "device_path": {
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "project_id": {
            "type": "string",
            "format": "uuid"
          },
          "size": {
            "$ref": "#/components/schemas/ByteCount"
          },
          "snapshot_id": {
            "nullable": true,
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/DiskState"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "device_path",
          "id",
          "name",
          "project_id",
          "size",
          "state",
          "time_created",
          "time_modified"
        ]
      },
      "DiskCreate": {
        "description": "Create-time parameters for a [`Disk`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "size": {
            "description": "size of the Disk",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "snapshot_id": {
            "nullable": true,
            "description": "id for snapshot from which the Disk should be created, if any",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "name",
          "size"
        ]
      },
      "DiskIdentifier": {
        "description": "Parameters for the [`Disk`] to be attached or detached to an instance",
        "type": "object",
        "properties": {
          "disk": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "disk"
        ]
      },
      "DiskResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Disk"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "DiskState": {
        "description": "State of a Disk (primarily: attached or not)",
        "oneOf": [
          {
            "description": "Disk is being initialized",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "creating"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is ready but detached from any Instance",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "detached"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is being attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is attached to the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "attached"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk is being detached from the given Instance",
            "type": "object",
            "properties": {
              "instance": {
                "type": "string",
                "format": "uuid"
              },
              "state": {
                "type": "string",
                "enum": [
                  "detaching"
                ]
              }
            },
            "required": [
              "instance",
              "state"
            ]
          },
          {
            "description": "Disk has been destroyed",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "destroyed"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "description": "Disk is unavailable",
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "faulted"
                ]
              }
            },
            "required": [
              "state"
            ]
          }
        ]
      },
      "FieldSchema": {
        "description": "The name and type information for a field of a timeseries schema.",
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/FieldSource"
          },
          "ty": {
            "$ref": "#/components/schemas/FieldType"
          }
        },
        "required": [
          "name",
          "source",
          "ty"
        ]
      },
      "FieldSource": {
        "description": "The source from which a field is derived, the target or metric.",
        "type": "string",
        "enum": [
          "Target",
          "Metric"
        ]
      },
      "FieldType": {
        "description": "The `FieldType` identifies the data type of a target or metric field.",
        "type": "string",
        "enum": [
          "String",
          "I64",
          "IpAddr",
          "Uuid",
          "Bool"
        ]
      },
      "IdSortMode": {
        "description": "Supported set of sort modes for scanning by id only.\n\nCurrently, we only support scanning in ascending order.",
        "type": "string",
        "enum": [
          "id-ascending"
        ]
      },
      "Instance": {
        "description": "Client view of an [`Instance`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "hostname": {
            "description": "RFC1035-compliant hostname for the Instance.",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "memory": {
            "description": "memory allocated for this Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/ByteCount"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "ncpus": {
            "description": "number of CPUs allocated for this Instance",
            "allOf": [
              {
                "$ref": "#/components/schemas/InstanceCpuCount"
              }
            ]
          },
          "project_id": {
            "description": "id for the project containing this Instance",
            "type": "string",
            "format": "uuid"
          },
          "run_state": {
            "$ref": "#/components/schemas/InstanceState"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "time_run_state_updated": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "hostname",
          "id",
          "memory",
          "name",
          "ncpus",
          "project_id",
          "run_state",
          "time_created",
          "time_modified",
          "time_run_state_updated"
        ]
      },
      "InstanceCpuCount": {
        "description": "The number of CPUs in an Instance",
        "type": "integer",
        "format": "uint16",
        "minimum": 0
      },
      "InstanceCreate": {
        "description": "Create-time parameters for an [`Instance`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "hostname": {
            "type": "string"
          },
          "memory": {
            "$ref": "#/components/schemas/ByteCount"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "ncpus": {
            "$ref": "#/components/schemas/InstanceCpuCount"
          }
        },
        "required": [
          "description",
          "hostname",
          "memory",
          "name",
          "ncpus"
        ]
      },
      "InstanceResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Instance"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "InstanceState": {
        "description": "Running state of an Instance (primarily: booted or stopped)\n\nThis typically reflects whether it's starting, running, stopping, or stopped, but also includes states related to the Instance's lifecycle",
        "type": "string",
        "enum": [
          "creating",
          "starting",
          "running",
          "stopping",
          "stopped",
          "rebooting",
          "repairing",
          "failed",
          "destroyed"
        ]
      },
      "Ipv4Net": {
        "title": "An IPv4 subnet",
        "description": "An IPv4 subnet, including prefix and subnet mask",
        "type": "string",
        "pattern": "^(10\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9]\\.){2}(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])/(1[0-9]|2[0-8]|[8-9]))$^(172\\.16\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])/(1[2-9]|2[0-8]))$^(192\\.168\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])\\.(25[0-5]|[1-2][0-4][0-9]|[1-9][0-9]|[0-9])/(1[6-9]|2[0-8]))$",
        "maxLength": 18
      },
      "Ipv6Net": {
        "title": "An IPv6 subnet",
        "description": "An IPv6 subnet, including prefix and subnet mask",
        "type": "string",
        "pattern": "^(fd|FD)00:((([0-9a-fA-F]{1,4}\\:){6}[0-9a-fA-F]{1,4})|(([0-9a-fA-F]{1,4}:){1,6}:))/(6[4-9]|[7-9][0-9]|1[0-1][0-9]|12[0-6])$",
        "maxLength": 43
      },
      "L4PortRange": {
        "title": "A range of IP ports",
        "description": "An inclusive-inclusive range of IP ports. The second port may be omitted to represent a single port",
        "type": "string",
        "pattern": "^[0-9]{1,5}(-[0-9]{1,5})?$",
        "minLength": 1,
        "maxLength": 11
      },
      "LoginParams": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          }
        },
        "required": [
          "username"
        ]
      },
      "MacAddr": {
        "title": "A MAC address",
        "description": "A Media Access Control address, in EUI-48 format",
        "type": "string",
        "pattern": "^([0-9a-fA-F]{2}:){5}[0-9a-fA-F]{2}$",
        "minLength": 17,
        "maxLength": 17
      },
      "Name": {
        "title": "A name used in the API",
        "description": "Names must begin with a lower case ASCII letter, be composed exclusively of lowercase ASCII, uppercase ASCII, numbers, and '-', and may not end with a '-'.",
        "type": "string",
        "pattern": "[a-z](|[a-zA-Z0-9-]*[a-zA-Z0-9])",
        "maxLength": 63
      },
      "NameOrIdSortMode": {
        "description": "Supported set of sort modes for scanning by name or id",
        "type": "string",
        "enum": [
          "name-ascending",
          "name-descending",
          "id-ascending"
        ]
      },
      "NameSortMode": {
        "description": "Supported set of sort modes for scanning by name only\n\nCurrently, we only support scanning in ascending order.",
        "type": "string",
        "enum": [
          "name-ascending"
        ]
      },
      "NetworkInterface": {
        "description": "A `NetworkInterface` represents a virtual network interface device.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "instance_id": {
            "description": "The Instance to which the interface belongs.",
            "type": "string",
            "format": "uuid"
          },
          "ip": {
            "description": "The IP address assigned to this interface.",
            "type": "string",
            "format": "ip"
          },
          "mac": {
            "description": "The MAC address assigned to this interface.",
            "allOf": [
              {
                "$ref": "#/components/schemas/MacAddr"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "subnet_id": {
            "description": "The subnet to which the interface belongs.",
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vpc_id": {
            "description": "The VPC to which the interface belongs.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "id",
          "instance_id",
          "ip",
          "mac",
          "name",
          "subnet_id",
          "time_created",
          "time_modified",
          "vpc_id"
        ]
      },
      "NetworkInterfaceResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkInterface"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Organization": {
        "description": "Client view of an [`Organization`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "OrganizationCreate": {
        "description": "Create-time parameters for an [`Organization`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "OrganizationResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "OrganizationUpdate": {
        "description": "Updateable properties of an [`Organization`]",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "Project": {
        "description": "Client view of a [`Project`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "organization_id": {
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "organization_id",
          "time_created",
          "time_modified"
        ]
      },
      "ProjectCreate": {
        "description": "Create-time parameters for a [`Project`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "ProjectResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "ProjectUpdate": {
        "description": "Updateable properties of a [`Project`]",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "Rack": {
        "description": "Client view of an [`Rack`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "RackResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Rack"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Role": {
        "description": "Client view of a [`Role`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/RoleName"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "RoleName": {
        "title": "A name for a built-in role",
        "description": "Role names consist of two string components separated by dot (\".\").",
        "type": "string",
        "pattern": "[a-z-]+\\.[a-z-]+",
        "maxLength": 63
      },
      "RoleResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Role"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "RouteDestination": {
        "description": "A subset of [`NetworkTarget`], `RouteDestination` specifies the kind of network traffic that will be matched to be forwarded to the [`RouteTarget`].",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vpc"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "subnet"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "RouteTarget": {
        "description": "A subset of [`NetworkTarget`], `RouteTarget` specifies all possible targets that a route can forward to.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vpc"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "subnet"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "instance"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "internet_gateway"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "RouterRoute": {
        "description": "A route defines a rule that governs where traffic should be sent based on its destination.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "destination": {
            "$ref": "#/components/schemas/RouteDestination"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "kind": {
            "description": "Describes the kind of router. Set at creation. `read-only`",
            "allOf": [
              {
                "$ref": "#/components/schemas/RouterRouteKind"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "router_id": {
            "description": "The VPC Router to which the route belongs.",
            "type": "string",
            "format": "uuid"
          },
          "target": {
            "$ref": "#/components/schemas/RouteTarget"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "destination",
          "id",
          "kind",
          "name",
          "router_id",
          "target",
          "time_created",
          "time_modified"
        ]
      },
      "RouterRouteCreateParams": {
        "description": "Create-time parameters for a [`RouterRoute`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "destination": {
            "$ref": "#/components/schemas/RouteDestination"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "target": {
            "$ref": "#/components/schemas/RouteTarget"
          }
        },
        "required": [
          "description",
          "destination",
          "name",
          "target"
        ]
      },
      "RouterRouteKind": {
        "description": "The classification of a [`RouterRoute`] as defined by the system. The kind determines certain attributes such as if the route is modifiable and describes how or where the route was created.\n\nSee [RFD-21](https://rfd.shared.oxide.computer/rfd/0021#concept-router) for more context",
        "type": "string",
        "enum": [
          "default",
          "vpc_subnet",
          "vpc_peering",
          "custom"
        ]
      },
      "RouterRouteResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RouterRoute"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "RouterRouteUpdateParams": {
        "description": "Updateable properties of a [`RouterRoute`]",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "destination": {
            "$ref": "#/components/schemas/RouteDestination"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "target": {
            "$ref": "#/components/schemas/RouteTarget"
          }
        },
        "required": [
          "destination",
          "target"
        ]
      },
      "Saga": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "state": {
            "$ref": "#/components/schemas/SagaState"
          }
        },
        "required": [
          "id",
          "state"
        ]
      },
      "SagaErrorInfo": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "action_failed"
                ]
              },
              "source_error": {}
            },
            "required": [
              "error",
              "source_error"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "deserialize_failed"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "injected_error"
                ]
              }
            },
            "required": [
              "error"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "serialize_failed"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "enum": [
                  "subsaga_create_failed"
                ]
              },
              "message": {
                "type": "string"
              }
            },
            "required": [
              "error",
              "message"
            ]
          }
        ]
      },
      "SagaResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Saga"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "SagaState": {
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "running"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "state": {
                "type": "string",
                "enum": [
                  "succeeded"
                ]
              }
            },
            "required": [
              "state"
            ]
          },
          {
            "type": "object",
            "properties": {
              "error_info": {
                "$ref": "#/components/schemas/SagaErrorInfo"
              },
              "error_node_name": {
                "type": "string"
              },
              "state": {
                "type": "string",
                "enum": [
                  "failed"
                ]
              }
            },
            "required": [
              "error_info",
              "error_node_name",
              "state"
            ]
          }
        ]
      },
      "SessionUser": {
        "description": "Client view of currently authed user.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "id"
        ]
      },
      "Sled": {
        "description": "Client view of an [`Sled`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "service_address": {
            "type": "string"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "service_address",
          "time_created",
          "time_modified"
        ]
      },
      "SledResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sled"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "TimeseriesName": {
        "title": "The name of a timeseries",
        "description": "Names are constructed by concatenating the target and metric names with ':'. Target and metric names must be lowercase alphanumeric characters with '_' separating words.",
        "type": "string",
        "pattern": "(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*):(([a-z]+[a-z0-9]*)(_([a-z0-9]+))*)"
      },
      "TimeseriesSchema": {
        "description": "The schema for a timeseries.\n\nThis includes the name of the timeseries, as well as the datum type of its metric and the schema for each field.",
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "datum_type": {
            "$ref": "#/components/schemas/DatumType"
          },
          "field_schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldSchema"
            }
          },
          "timeseries_name": {
            "$ref": "#/components/schemas/TimeseriesName"
          }
        },
        "required": [
          "created",
          "datum_type",
          "field_schema",
          "timeseries_name"
        ]
      },
      "TimeseriesSchemaResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TimeseriesSchema"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "User": {
        "description": "Client view of a [`User`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "time_created",
          "time_modified"
        ]
      },
      "UserResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "Vpc": {
        "description": "Client view of a [`Vpc`]",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "dns_name": {
            "description": "The name used for the VPC in DNS.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "project_id": {
            "description": "id for the project containing this VPC",
            "type": "string",
            "format": "uuid"
          },
          "system_router_id": {
            "description": "id for the system router where subnet default routes are registered",
            "type": "string",
            "format": "uuid"
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "description",
          "dns_name",
          "id",
          "name",
          "project_id",
          "system_router_id",
          "time_created",
          "time_modified"
        ]
      },
      "VpcCreate": {
        "description": "Create-time parameters for a [`Vpc`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "dns_name": {
            "$ref": "#/components/schemas/Name"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "dns_name",
          "name"
        ]
      },
      "VpcFirewallRule": {
        "description": "A single rule in a VPC firewall",
        "type": "object",
        "properties": {
          "action": {
            "description": "whether traffic matching the rule should be allowed or dropped",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleAction"
              }
            ]
          },
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "direction": {
            "description": "whether this rule is for incoming or outgoing traffic",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleDirection"
              }
            ]
          },
          "filters": {
            "description": "reductions on the scope of the rule",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleFilter"
              }
            ]
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "priority": {
            "description": "the relative priority of this rule",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "status": {
            "description": "whether this rule is in effect",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleStatus"
              }
            ]
          },
          "targets": {
            "description": "list of sets of instances that the rule applies to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleTarget"
            }
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "action",
          "description",
          "direction",
          "filters",
          "id",
          "name",
          "priority",
          "status",
          "targets",
          "time_created",
          "time_modified"
        ]
      },
      "VpcFirewallRuleAction": {
        "type": "string",
        "enum": [
          "allow",
          "deny"
        ]
      },
      "VpcFirewallRuleDirection": {
        "type": "string",
        "enum": [
          "inbound",
          "outbound"
        ]
      },
      "VpcFirewallRuleFilter": {
        "description": "Filter for a firewall rule. A given packet must match every field that is present for the rule to apply to it. A packet matches a field if any entry in that field matches the packet.",
        "type": "object",
        "properties": {
          "hosts": {
            "nullable": true,
            "description": "If present, the sources (if incoming) or destinations (if outgoing) this rule applies to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleHostFilter"
            }
          },
          "ports": {
            "nullable": true,
            "description": "If present, the destination ports this rule applies to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/L4PortRange"
            }
          },
          "protocols": {
            "nullable": true,
            "description": "If present, the networking protocols this rule applies to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleProtocol"
            }
          }
        }
      },
      "VpcFirewallRuleHostFilter": {
        "description": "A subset of [`NetworkTarget`], `VpcFirewallRuleHostFilter` specifies all possible targets that a route can forward to.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vpc"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "subnet"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "instance"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "ip"
                ]
              },
              "value": {
                "type": "string",
                "format": "ip"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "internet_gateway"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "VpcFirewallRuleProtocol": {
        "description": "The protocols that may be specified in a firewall rule's filter",
        "type": "string",
        "enum": [
          "TCP",
          "UDP",
          "ICMP"
        ]
      },
      "VpcFirewallRuleResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRule"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "VpcFirewallRuleStatus": {
        "type": "string",
        "enum": [
          "disabled",
          "enabled"
        ]
      },
      "VpcFirewallRuleTarget": {
        "description": "A subset of [`NetworkTarget`], `VpcFirewallRuleTarget` specifies all possible targets that a firewall rule can be attached to.",
        "oneOf": [
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "vpc"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "subnet"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "instance"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/Name"
              }
            },
            "required": [
              "type",
              "value"
            ]
          }
        ]
      },
      "VpcFirewallRuleUpdate": {
        "description": "A single rule in a VPC firewall",
        "type": "object",
        "properties": {
          "action": {
            "description": "whether traffic matching the rule should be allowed or dropped",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleAction"
              }
            ]
          },
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "direction": {
            "description": "whether this rule is for incoming or outgoing traffic",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleDirection"
              }
            ]
          },
          "filters": {
            "description": "reductions on the scope of the rule",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleFilter"
              }
            ]
          },
          "priority": {
            "description": "the relative priority of this rule",
            "type": "integer",
            "format": "uint16",
            "minimum": 0
          },
          "status": {
            "description": "whether this rule is in effect",
            "allOf": [
              {
                "$ref": "#/components/schemas/VpcFirewallRuleStatus"
              }
            ]
          },
          "targets": {
            "description": "list of sets of instances that the rule applies to",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcFirewallRuleTarget"
            }
          }
        },
        "required": [
          "action",
          "description",
          "direction",
          "filters",
          "priority",
          "status",
          "targets"
        ]
      },
      "VpcFirewallRuleUpdateParams": {
        "description": "Updateable properties of a [`Vpc`]'s firewall Note that VpcFirewallRules are implicitly created along with a Vpc, so there is no explicit creation.",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/VpcFirewallRuleUpdate"
        }
      },
      "VpcFirewallRuleUpdateResult": {
        "description": "Response to an update replacing [`Vpc`]'s firewall",
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/VpcFirewallRule"
        }
      },
      "VpcResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vpc"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "VpcRouter": {
        "description": "A VPC router defines a series of rules that indicate where traffic should be sent depending on its destination.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "kind": {
            "$ref": "#/components/schemas/VpcRouterKind"
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vpc_id": {
            "description": "The VPC to which the router belongs.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "id",
          "kind",
          "name",
          "time_created",
          "time_modified",
          "vpc_id"
        ]
      },
      "VpcRouterCreate": {
        "description": "Create-time parameters for a [`VpcRouter`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "VpcRouterKind": {
        "type": "string",
        "enum": [
          "system",
          "custom"
        ]
      },
      "VpcRouterResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcRouter"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "VpcRouterUpdate": {
        "description": "Updateable properties of a [`VpcRouter`]",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "VpcSubnet": {
        "description": "A VPC subnet represents a logical grouping for instances that allows network traffic between them, within a IPv4 subnetwork or optionall an IPv6 subnetwork.",
        "type": "object",
        "properties": {
          "description": {
            "description": "human-readable free-form text about a resource",
            "type": "string"
          },
          "id": {
            "description": "unique, immutable, system-controlled identifier for each resource",
            "type": "string",
            "format": "uuid"
          },
          "ipv4_block": {
            "nullable": true,
            "description": "The IPv4 subnet CIDR block.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          "ipv6_block": {
            "nullable": true,
            "description": "The IPv6 subnet CIDR block.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          },
          "name": {
            "description": "unique, mutable, user-controlled identifier for each resource",
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "time_created": {
            "description": "timestamp when this resource was created",
            "type": "string",
            "format": "date-time"
          },
          "time_modified": {
            "description": "timestamp when this resource was last modified",
            "type": "string",
            "format": "date-time"
          },
          "vpc_id": {
            "description": "The VPC to which the subnet belongs.",
            "type": "string",
            "format": "uuid"
          }
        },
        "required": [
          "description",
          "id",
          "name",
          "time_created",
          "time_modified",
          "vpc_id"
        ]
      },
      "VpcSubnetCreate": {
        "description": "Create-time parameters for a [`VpcSubnet`]",
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "ipv4_block": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          "ipv6_block": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          }
        },
        "required": [
          "description",
          "name"
        ]
      },
      "VpcSubnetResultsPage": {
        "description": "A single page of results",
        "type": "object",
        "properties": {
          "items": {
            "description": "list of items on this page of results",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VpcSubnet"
            }
          },
          "next_page": {
            "nullable": true,
            "description": "token used to fetch the next page of results (if any)",
            "type": "string"
          }
        },
        "required": [
          "items"
        ]
      },
      "VpcSubnetUpdate": {
        "description": "Updateable properties of a [`VpcSubnet`]",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "ipv4_block": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv4Net"
              }
            ]
          },
          "ipv6_block": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Ipv6Net"
              }
            ]
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      },
      "VpcUpdate": {
        "description": "Updateable properties of a [`Vpc`]",
        "type": "object",
        "properties": {
          "description": {
            "nullable": true,
            "type": "string"
          },
          "dns_name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "racks"
    },
    {
      "name": "sleds"
    },
    {
      "name": "organizations"
    },
    {
      "name": "disks"
    },
    {
      "name": "projects"
    },
    {
      "name": "users"
    },
    {
      "name": "roles"
    },
    {
      "name": "instances"
    },
    {
      "name": "sagas"
    },
    {
      "name": "metrics"
    },
    {
      "name": "vpcs"
    },
    {
      "name": "subnets"
    },
    {
      "name": "firewall"
    },
    {
      "name": "routers"
    },
    {
      "name": "routes"
    },
    {
      "name": "hidden"
    }
  ]
}